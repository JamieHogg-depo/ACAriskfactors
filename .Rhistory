full_inset_plt <- arrangeGrob(grobs = c(list(base_boxes), inset_list, list(llegend)),
layout_matrix  = lay)
# save object
jsave(filename = paste0("irsd_.png"),
base_folder = paste0(base_folder, "/maps"),
plot = full_inset_plt, square = F)
# cleanup
rm(base, base_boxes, llegend, base_legend, lay, full_inset_plt)
message("---- Finished irsd")
map_sa2 %>%
mutate(irsd_5c = irsd_5c) %>%
ggplot()+
theme_void()+
geom_sf(aes(fill = irsd_5c), col = NA)+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
map_sa2 %>%
mutate(irsd_5c = irsd_5c) %>%
ggplot()+
theme_void()+
geom_sf(aes(fill = irsd_5c), col = NA)+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
modelled_est$summ$sa2_map %>%
mutate(irsd_5c = irsd_5c) %>%
ggplot()+
theme_void()+
geom_sf(aes(fill = ABS_irsd_decile_nation_complete), col = NA)+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
modelled_est$summ$sa2 %>%
+     mutate(irsd_5c = irsd_5c)
modelled_est$summ$sa2 %>% mutate(irsd_5c = irsd_5c)
modelled_est$summ$sa2 %>% mutate(irsd_5c = irsd_5c) %>% group_by(ABS_irsd_decile_nation_complete, irsd_5c) %>% tally()
map_sa2
base <- map_sa2 %>%
arrange(ps_area) %>%
mutate(irsd_5c = irsd_5c) %>%
ggplot()+
theme_void()+
geom_sf(aes(fill = irsd_5c), col = NA)+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
# Base map with legend
(base_legend <- base +
labs(fill = "")+
theme(legend.position = "bottom"))
llegend <- ggpubr::get_legend(base_legend)
# Base map with boxes
base_boxes <- base
for(i in 1:8){
base_boxes <- base_boxes +
addBoxLabel(i, color = "black", size = 0.2)
}
# Create list of insets
inset_list <- list()
for(i in 1:8){
inset_list[[i]] <- base +
xlim(lims$xmin[i], lims$xmax[i]) +
ylim(lims$ymin[i], lims$ymax[i]) +
labs(title = lims$inset_labs[i])+
theme(panel.border = element_rect(colour = "black", size=1, fill=NA),
plot.title = element_text(margin = margin(0,0,2,0),
size = 6),
plot.margin = unit(c(1,1,1,1), "mm"))
}
inset_list <- Filter(Negate(is.null), inset_list)
# create final list
lay <- rbind(c(9,1,1,1,1,2),
c(5,1,1,1,1,3),
c(6,1,1,1,1,8),
c(4,10,10,10,10,7))
full_inset_plt <- arrangeGrob(grobs = c(list(base_boxes), inset_list, list(llegend)),
layout_matrix  = lay)
plot(full_inset_plt)
# save object
jsave(filename = paste0("irsd_.png"),
base_folder = paste0(base_folder, "/maps"),
plot = full_inset_plt, square = F)
# cleanup
rm(base, base_boxes, llegend, base_legend, lay, full_inset_plt)
message("---- Finished irsd")
# save object
jsave(filename = paste0("irsd.png"),
base_folder = paste0(base_folder, "/maps"),
plot = full_inset_plt, square = F)
# base map
base <- map_sa2 %>%
arrange(ps_area) %>%
mutate(irsd_5c = irsd_5c) %>%
ggplot()+
theme_void()+
geom_sf(aes(fill = irsd_5c), col = NA)+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
# Base map with legend
(base_legend <- base +
labs(fill = "")+
theme(legend.position = "bottom"))
llegend <- ggpubr::get_legend(base_legend)
# Base map with boxes
base_boxes <- base
for(i in 1:8){
base_boxes <- base_boxes +
addBoxLabel(i, color = "black", size = 0.2)
}
# Create list of insets
inset_list <- list()
for(i in 1:8){
inset_list[[i]] <- base +
xlim(lims$xmin[i], lims$xmax[i]) +
ylim(lims$ymin[i], lims$ymax[i]) +
labs(title = lims$inset_labs[i])+
theme(panel.border = element_rect(colour = "black", size=1, fill=NA),
plot.title = element_text(margin = margin(0,0,2,0),
size = 6),
plot.margin = unit(c(1,1,1,1), "mm"))
}
inset_list <- Filter(Negate(is.null), inset_list)
# create final list
lay <- rbind(c(9,1,1,1,1,2),
c(5,1,1,1,1,3),
c(6,1,1,1,1,8),
c(4,10,10,10,10,7))
full_inset_plt <- arrangeGrob(grobs = c(list(base_boxes), inset_list, list(llegend)),
layout_matrix  = lay)
# save object
jsave(filename = paste0("irsd.png"),
base_folder = paste0(base_folder, "/maps"),
plot = full_inset_plt, square = F)
# cleanup
rm(base, base_boxes, llegend, base_legend, lay, full_inset_plt)
message("---- Finished irsd")
source("src/ms.R")
k <- 1
rf <- names(raw_est)[k]
message("Started ", k, ": ", rf)
# load data
modelled_est <- readRDS(file = paste0("data/summary_files/", rf, "_b1.rds"))
# load data
modelled_est <- readRDS(file = paste0("data/DataLabExport/modelled_est_", rf, ".rds"))
dim(modelled_est$mu)
temp <- bind_rows(lapply(asplit(modelled_est$or, 2), quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T))
temp
activityleis_b1 <- readRDS("C:/r_proj/ACAriskfactors/data/summary_files/activityleis_b1.rds")
head(activityleis_b1$summ$sa2)
activityleis_b1$summ$sa2 %>% relocate(or_median, or_lower, or_upper) %>% head()
temp
# get OR quantiles
or_quants <- bind_rows(lapply(asplit(modelled_est$or, 2), quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("p10", "p20", "p50", "p80", "p90"))
View(or_quants)
# get logOR quantiles
logor_quants <- bind_rows(lapply(asplit(log(modelled_est$or), 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("logp10", "logp20", "logp50", "logp80", "logp90"))
logor_quants
v <- bind_cols(getDPP(modelled_est$draws$or, null_value = 1))
v <- bind_cols(getDPP(modelled_est$or, null_value = 1))
v
# V-plot - exceedance probability
v <- bind_cols(getDPP(modelled_est$or, null_value = 1)) %>%
dplyr::select(EP) %>%
setNames("v")
v
global_obj$area_concor
# add all colums
out <- cbind(dplyr::select(global_obj$area_concor, SA2), or_quants, logor_quants, v)
View(out)
rf <- names(raw_est)[k]
message("Started ", k, ": ", rf)
# load data
modelled_est <- readRDS(file = paste0("data/DataLabExport/modelled_est_", rf, ".rds"))
# get OR quantiles
or_quants <- bind_rows(lapply(asplit(modelled_est$or, 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("p10", "p20", "p50", "p80", "p90"))
# get logOR quantiles
logor_quants <- bind_rows(lapply(asplit(log(modelled_est$or), 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("logp10", "logp20", "logp50", "logp80", "logp90"))
# V-plot - exceedance probability
v <- bind_cols(getDPP(modelled_est$or, null_value = 1)) %>%
dplyr::select(EP) %>%
setNames("v")
# add all colums
out <- cbind(dplyr::select(global_obj$area_concor, SA2), or_quants, logor_quants, v) %>%
mutate(riskfactor = k)
##
# Create data for ViseR
##
source("src/ms.R")
out <- list()
## START FOR LOOP #### ---------------------------------------------------------
for(k in 1:8){
rf <- names(raw_est)[k]
message("Started ", k, ": ", rf)
# load data
modelled_est <- readRDS(file = paste0("data/DataLabExport/modelled_est_", rf, ".rds"))
# get OR quantiles
or_quants <- bind_rows(lapply(asplit(modelled_est$or, 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("p10", "p20", "p50", "p80", "p90"))
# get logOR quantiles
logor_quants <- bind_rows(lapply(asplit(log(modelled_est$or), 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("logp10", "logp20", "logp50", "logp80", "logp90"))
# V-plot - exceedance probability
v <- bind_cols(getDPP(modelled_est$or, null_value = 1)) %>%
dplyr::select(EP) %>%
setNames("v")
# add all colums
out[[k]] <- cbind(dplyr::select(global_obj$area_concor, SA2), or_quants, logor_quants, v) %>%
mutate(riskfactor = k)
## FINISH FOR LOOP #### --------------------------------------------------------
}
data <- bind_rows(out)
## END SCRIPT #### -------------------------------------------------------------
# Packages
library(tidyverse)
library(readr)
library(readxl)
rm(list = ls())
## Functions ## ----------------------------------------------------------------
source('src/functions_ALL.R')
source('src/moreFuns.R')
##
# Create data for ViseR
##
# Packages
library(tidyverse)
library(readr)
library(readxl)
rm(list = ls())
## Functions ## ----------------------------------------------------------------
source('src/functions_ALL.R')
source('src/moreFuns.R')
## START FOR LOOP #### ---------------------------------------------------------
out <- list()
for(k in 1:8){
rf <- names(raw_est)[k]
message("Started ", k, ": ", rf)
# load data
modelled_est <- readRDS(file = paste0("data/DataLabExport/modelled_est_", rf, ".rds"))
# get mu quantiles
mu_quants <- bind_rows(lapply(asplit(modelled_est$mu, 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("p10", "p20", "p50", "p80", "p90"))
# get OR quantiles
or_quants <- bind_rows(lapply(asplit(modelled_est$or, 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("p10", "p20", "p50", "p80", "p90"))
# get logOR quantiles
logor_quants <- bind_rows(lapply(asplit(log(modelled_est$or), 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("logp10", "logp20", "logp50", "logp80", "logp90"))
# V-plot - exceedance probability
v <- bind_cols(getDPP(modelled_est$or, null_value = 1)) %>%
dplyr::select(EP) %>%
setNames("v")
# add all colums
out[[k]] <- cbind(dplyr::select(global_obj$area_concor, SA2), or_quants, logor_quants, v, mu_quants) %>%
mutate(riskfactor = k)
# cleanup
rm(modelled_est, mu_quants, or_quants, logor_quants, v)
## FINISH FOR LOOP #### --------------------------------------------------------
}
data <- bind_rows(out)
# Packages
library(tidyverse)
library(readr)
library(readxl)
rm(list = ls())
## Functions ## ----------------------------------------------------------------
source('src/functions_ALL.R')
source('src/moreFuns.R')
# Load raw estimates
raw_est <- pbapply::pblapply(list.files("data/DataLabExport",
pattern = "raw_est_*", full.names = T), readRDS)
names(raw_est) <- str_remove(
str_remove(
list.files("data/DataLabExport", pattern = "raw_est_*"), "raw_est_"), ".rds")
## START FOR LOOP #### ---------------------------------------------------------
out <- list()
for(k in 1:8){
rf <- names(raw_est)[k]
message("Started ", k, ": ", rf)
# load data
modelled_est <- readRDS(file = paste0("data/DataLabExport/modelled_est_", rf, ".rds"))
# get mu quantiles
mu_quants <- bind_rows(lapply(asplit(modelled_est$mu, 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("p10", "p20", "p50", "p80", "p90"))
# get OR quantiles
or_quants <- bind_rows(lapply(asplit(modelled_est$or, 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("p10", "p20", "p50", "p80", "p90"))
# get logOR quantiles
logor_quants <- bind_rows(lapply(asplit(log(modelled_est$or), 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("logp10", "logp20", "logp50", "logp80", "logp90"))
# V-plot - exceedance probability
v <- bind_cols(getDPP(modelled_est$or, null_value = 1)) %>%
dplyr::select(EP) %>%
setNames("v")
# add all colums
out[[k]] <- cbind(dplyr::select(global_obj$area_concor, SA2), or_quants, logor_quants, v, mu_quants) %>%
mutate(riskfactor = k)
# cleanup
rm(modelled_est, mu_quants, or_quants, logor_quants, v)
## FINISH FOR LOOP #### --------------------------------------------------------
}
data <- bind_rows(out)
# Packages
library(tidyverse)
library(readr)
library(readxl)
rm(list = ls())
## Functions ## ----------------------------------------------------------------
source('src/functions_ALL.R')
source('src/moreFuns.R')
# Load global data
global_obj <- readRDS("data/DataLabExport/global_obj.rds")
# Load raw estimates
raw_est <- pbapply::pblapply(list.files("data/DataLabExport",
pattern = "raw_est_*", full.names = T), readRDS)
names(raw_est) <- str_remove(
str_remove(
list.files("data/DataLabExport", pattern = "raw_est_*"), "raw_est_"), ".rds")
## START FOR LOOP #### ---------------------------------------------------------
out <- list()
for(k in 1:8){
rf <- names(raw_est)[k]
message("Started ", k, ": ", rf)
# load data
modelled_est <- readRDS(file = paste0("data/DataLabExport/modelled_est_", rf, ".rds"))
# get mu quantiles
mu_quants <- bind_rows(lapply(asplit(modelled_est$mu, 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("p10", "p20", "p50", "p80", "p90"))
# get OR quantiles
or_quants <- bind_rows(lapply(asplit(modelled_est$or, 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("p10", "p20", "p50", "p80", "p90"))
# get logOR quantiles
logor_quants <- bind_rows(lapply(asplit(log(modelled_est$or), 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(c("logp10", "logp20", "logp50", "logp80", "logp90"))
# V-plot - exceedance probability
v <- bind_cols(getDPP(modelled_est$or, null_value = 1)) %>%
dplyr::select(EP) %>%
setNames("v")
# add all colums
out[[k]] <- cbind(dplyr::select(global_obj$area_concor, SA2), or_quants, logor_quants, v, mu_quants) %>%
mutate(riskfactor = k)
# cleanup
rm(modelled_est, mu_quants, or_quants, logor_quants, v)
## FINISH FOR LOOP #### --------------------------------------------------------
}
data <- bind_rows(out)
## END SCRIPT #### -------------------------------------------------------------
##
# Create data for ViseR
##
# Packages
library(tidyverse)
library(readr)
library(readxl)
rm(list = ls())
## Functions ## ----------------------------------------------------------------
source('src/functions_ALL.R')
source('src/moreFuns.R')
# Load global data
global_obj <- readRDS("data/DataLabExport/global_obj.rds")
# Load raw estimates
raw_est <- pbapply::pblapply(list.files("data/DataLabExport",
pattern = "raw_est_*", full.names = T), readRDS)
names(raw_est) <- str_remove(
str_remove(
list.files("data/DataLabExport", pattern = "raw_est_*"), "raw_est_"), ".rds")
## START FOR LOOP #### ---------------------------------------------------------
out <- list()
for(k in 1:8){
rf <- names(raw_est)[k]
message("Started ", k, ": ", rf)
# load data
modelled_est <- readRDS(file = paste0("data/DataLabExport/modelled_est_", rf, ".rds"))
# get mu quantiles
mu_quants <- bind_rows(lapply(asplit(modelled_est$mu, 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(paste0("mu_", c("p10", "p20", "p50", "p80", "p90")))
# get OR quantiles
or_quants <- bind_rows(lapply(asplit(modelled_est$or, 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(paste0("or_", c("p10", "p20", "p50", "p80", "p90")))
# get logOR quantiles
logor_quants <- bind_rows(lapply(asplit(log(modelled_est$or), 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(paste0("or_", c("logp10", "logp20", "logp50", "logp80", "logp90")))
# V-plot - exceedance probability
v <- bind_cols(getDPP(modelled_est$or, null_value = 1)) %>%
dplyr::select(EP) %>%
setNames("v")
# add all colums
out[[k]] <- cbind(dplyr::select(global_obj$area_concor, SA2), or_quants, logor_quants, v, mu_quants) %>%
mutate(riskfactor = k)
# cleanup
rm(modelled_est, mu_quants, or_quants, logor_quants, v)
## FINISH FOR LOOP #### --------------------------------------------------------
}
data <- bind_rows(out)
View(data)
data <- bind_rows(out) %>%
relocate(k, SA2)
data <- bind_rows(out) %>%
relocate(riskfactor, SA2)
data <- bind_rows(out) %>%
relocate(riskfactor, SA2) %>%
write.csv(., "data/riskfactor_estimates_ViseR.csv")
library(tidyverse)
library(readr)
library(readxl)
rm(list = ls())
## Functions ## ----------------------------------------------------------------
source('src/functions_ALL.R')
source('src/moreFuns.R')
# Load global data
global_obj <- readRDS("data/DataLabExport/global_obj.rds")
# Load raw estimates
raw_est <- pbapply::pblapply(list.files("data/DataLabExport",
pattern = "raw_est_*", full.names = T), readRDS)
names(raw_est) <- str_remove(
str_remove(
list.files("data/DataLabExport", pattern = "raw_est_*"), "raw_est_"), ".rds")
## START FOR LOOP #### ---------------------------------------------------------
out <- list()
for(k in 1:8){
rf <- names(raw_est)[k]
message("Started ", k, ": ", rf)
# load data
modelled_est <- readRDS(file = paste0("data/DataLabExport/modelled_est_", rf, ".rds"))
# get mu quantiles
mu_quants <- bind_rows(lapply(asplit(modelled_est$mu, 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(paste0("mu_", c("p10", "p20", "p50", "p80", "p90")))
# get OR quantiles
or_quants <- bind_rows(lapply(asplit(modelled_est$or, 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(paste0("or_", c("p10", "p20", "p50", "p80", "p90")))
# get logOR quantiles
logor_quants <- bind_rows(lapply(asplit(log(modelled_est$or), 2),
quantile, p = c(0.1,0.2,0.5,0.8,0.9), na.rm = T)) %>%
setNames(paste0("or_", c("logp10", "logp20", "logp50", "logp80", "logp90")))
# V-plot - exceedance probability
v <- bind_cols(getDPP(modelled_est$or, null_value = 1)) %>%
dplyr::select(EP) %>%
setNames("v")
# add all colums
out[[k]] <- cbind(dplyr::select(global_obj$area_concor, SA2), or_quants, logor_quants, v, mu_quants) %>%
mutate(level = k)
# cleanup
rm(modelled_est, mu_quants, or_quants, logor_quants, v)
## FINISH FOR LOOP #### --------------------------------------------------------
}
data <- bind_rows(out) %>%
mutate(indicator = "riskfactor",
sex = "Persons",
years = "2016-2017",
baseline = "national_average")
relocate(indicator, level, sex, years, baseline, SA2)
data <- bind_rows(out) %>%
mutate(indicator = "riskfactor",
sex = "Persons",
years = "2016-2017",
baseline = "national_average") %>%
relocate(indicator, level, sex, years, baseline, SA2)
View(data)
data <- bind_rows(out) %>%
mutate(indicator = "riskfactor",
sex = "Persons",
years = "2016-2017",
baseline = "national_average") %>%
relocate(indicator, level, sex, years, baseline, SA2) %>%
write.csv(., "data/riskfactor_estimates_ViseR.csv")
