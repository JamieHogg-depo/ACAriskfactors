ylim(lims$ymin[i], lims$ymax[i]) +
labs(title = lims$inset_labs[i])+
theme(panel.border = element_rect(colour = "black", size=1, fill=NA),
plot.title = element_text(margin = margin(0,0,2,0),
size = 4),
plot.margin = unit(c(1,1,1,1), "mm"))
}
inset_list <- Filter(Negate(is.null), inset_list)
lay <- rbind(c(9,1,1,1,1,2),
c(5,1,1,1,1,3),
c(6,1,1,1,1,8),
c(4,10,10,10,10,7))
full_inset_plt <- grid.arrange(grobs = c(list(base_mu_boxes), inset_list, list(base_legend)), layout_matrix  = lay)
jsave("that_plot.png", plot = full_inset_plt, square = F)
# base map
base_mu <- map_sa2_full %>%
mutate(y = runif(nrow(.))) %>%
ggplot()+
theme_void()+
geom_sf(aes(fill = y), col = NA)+
scale_fill_viridis_c(begin = 0, end = 1,
direction = -1,
option = "B")+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
# Base map with legend
(base_mu_legend <- base_mu +
labs(fill = "Proportion")+
guides(fill = guide_colourbar(barwidth = 15,
title.position = "top",
title.hjust = 0.5))+
theme(legend.position = "bottom"))
base_legend <- ggpubr::get_legend(base_mu_legend)
# Base map with boxes
base_mu_boxes <- base_mu
for(i in 1:8){
base_mu_boxes <- base_mu_boxes +
addBoxLabel(i, color = "black", size = 0.2)
}
# Create list of insets
inset_list <- list()
for(i in 1:8){
inset_list[[i]] <- base_mu +
xlim(lims$xmin[i], lims$xmax[i]) +
ylim(lims$ymin[i], lims$ymax[i]) +
labs(title = lims$inset_labs[i])+
theme(panel.border = element_rect(colour = "black", size=1, fill=NA),
plot.title = element_text(margin = margin(0,0,2,0),
size = 6),
plot.margin = unit(c(1,1,1,1), "mm"))
}
inset_list <- Filter(Negate(is.null), inset_list)
lay <- rbind(c(9,1,1,1,1,2),
c(5,1,1,1,1,3),
c(6,1,1,1,1,8),
c(4,10,10,10,10,7))
full_inset_plt <- grid.arrange(grobs = c(list(base_mu_boxes), inset_list, list(base_legend)), layout_matrix  = lay)
jsave("that_plot.png", plot = full_inset_plt, square = F)
source("src/ms.R")
S1_side <- c("Intercept only", "Fixed effects (FE)",
"NORF random effects (RE)",
"DH RE", "SA2 RE", "Residual error (sd = 1)",
"Residual error (sd = 2)")
# Functions
rows_of_mbs1 <- function(i){
model_building[[i]]$s1 %>%
make_numeric_decimal() %>%
mutate(specs = S1_side,
rf = names(model_building)[i]) %>%
relocate(rf, specs) %>%
mutate(id = 1:7)
}
temp_wrangle <- function(.data, rfs){
.data %>%
filter(rf %in% rfs) %>%
mutate(rf = ifelse(id == 1, rf, "")) %>%
dplyr::select(-id) %>%
setNames(c("", "", "ALC", "SR", "LOOCV"))
}
# Full table
temp_df <- bind_rows(lapply(1:4, rows_of_mbs1))
# split into two datasets of 4 and save
temp_df %>%
temp_wrangle(c("smoking", "alcohol", "diet", "obesity")) %>%
write.csv("out/tables/mbs1_1.csv")
temp_df %>%
temp_wrangle(c("overweight", "waist_circum", "activityleis", "activityleiswkpl")) %>%
write.csv("out/tables/mbs1_2.csv")
rm(temp_df, rows_of_mbs1, S1_side, temp_wrangle)
## SUPP Table 8-9: Model Building ## -------------------------------------------
S2_side <- c("Intercept only", "FE (non-varying)",
"FE (varying)",
"External latent field", "SA2 RE", "SA3 RE",
"Benchmarking")
# Function
rows_of_mbs2 <- function(i){
model_building[[i]]$s2 %>%
dplyr::select(contains(c("sa4_", "msb_"))) %>%
mutate(sa4_MARB = sa4_MARB * 100,
sa4_MRRMSE = sa4_MRRMSE * 100,
msb_MARB = msb_MARB * 100,
msb_MRRMSE = msb_MRRMSE * 100) %>%
make_numeric_decimal() %>%
mutate(specs = S2_side,
rf = names(model_building)[i]) %>%
relocate(rf, specs)
}
tempSetNames <- function(.data){
.data %>%
setNames(c("", "", "MARB", "MRRMSE", "MIOP", "MARB", "MRRMSE", "MIOP"))
}
# Full table
temp_df <- bind_rows(lapply(1:4, rows_of_mbs2))
# split into two datasets of 4 and save
temp_df %>% filter(rf %in% c("smoking", "alcohol", "diet", "obesity")) %>% tempSetNames() %>%  write.csv("out/tables/mbs2_1.csv")
temp_df %>% filter(rf %in% c("overweight", "waist_circum", "activityleis", "activityleiswkpl")) %>% tempSetNames() %>%  write.csv("out/tables/mbs2_2.csv")
rm(temp_df, rows_of_mbs2, S2_side, tempSetNames)
model_building
S1_side <- c("Intercept only", "Fixed effects (FE)",
"NORF random effects (RE)",
"DH RE", "SA2 RE", "Residual error (sd = 1)",
"Residual error (sd = 2)")
# Functions
rows_of_mbs1 <- function(i){
model_building[[i]]$s1 %>%
make_numeric_decimal() %>%
mutate(specs = S1_side,
rf = names(model_building)[i]) %>%
relocate(rf, specs) %>%
mutate(id = 1:7)
}
temp_wrangle <- function(.data, rfs){
.data %>%
filter(rf %in% rfs) %>%
mutate(rf = ifelse(id == 1, rf, "")) %>%
dplyr::select(-id) %>%
setNames(c("", "", "ALC", "SR", "LOOCV"))
}
# Full table
temp_df <- bind_rows(lapply(1:8, rows_of_mbs1))
# split into two datasets of 4 and save
temp_df %>%
temp_wrangle(c("smoking", "alcohol", "diet", "obesity")) %>%
write.csv("out/tables/mbs1_1.csv")
temp_df %>%
temp_wrangle(c("overweight", "waist_circum", "activityleis", "activityleiswkpl")) %>%
write.csv("out/tables/mbs1_2.csv")
rm(temp_df, rows_of_mbs1, S1_side, temp_wrangle)
## SUPP Table 8-9: Model Building ## -------------------------------------------
S2_side <- c("Intercept only", "FE (non-varying)",
"FE (varying)",
"External latent field", "SA2 RE", "SA3 RE",
"Benchmarking")
# Function
rows_of_mbs2 <- function(i){
model_building[[i]]$s2 %>%
dplyr::select(contains(c("sa4_", "msb_"))) %>%
mutate(sa4_MARB = sa4_MARB * 100,
sa4_MRRMSE = sa4_MRRMSE * 100,
msb_MARB = msb_MARB * 100,
msb_MRRMSE = msb_MRRMSE * 100) %>%
make_numeric_decimal() %>%
mutate(specs = S2_side,
rf = names(model_building)[i]) %>%
relocate(rf, specs)
}
tempSetNames <- function(.data){
.data %>%
setNames(c("", "", "MARB", "MRRMSE", "MIOP", "MARB", "MRRMSE", "MIOP"))
}
# Full table
temp_df <- bind_rows(lapply(1:8, rows_of_mbs2))
# split into two datasets of 4 and save
temp_df %>% filter(rf %in% c("smoking", "alcohol", "diet", "obesity")) %>% tempSetNames() %>%  write.csv("out/tables/mbs2_1.csv")
temp_df %>% filter(rf %in% c("overweight", "waist_circum", "activityleis", "activityleiswkpl")) %>% tempSetNames() %>%  write.csv("out/tables/mbs2_2.csv")
rm(temp_df, rows_of_mbs2, S2_side, tempSetNames)
S2_side <- c("Intercept only", "FE (non-varying)",
"FE (varying)",
"External latent field", "SA2 RE", "SA3 RE",
"Benchmarking")
# Function
rows_of_mbs2 <- function(i){
model_building[[i]]$s2 %>%
dplyr::select(contains(c("sa4_", "msb_"))) %>%
mutate(sa4_MARB = sa4_MARB * 100,
sa4_MRRMSE = sa4_MRRMSE * 100,
msb_MARB = msb_MARB * 100,
msb_MRRMSE = msb_MRRMSE * 100) %>%
make_numeric_decimal() %>%
mutate(specs = S2_side,
rf = names(model_building)[i]) %>%
relocate(rf, specs)
}
# Full table
temp_df <- bind_rows(lapply(1:8, rows_of_mbs2))
temp_df %>% temp_wrangle(c("smoking"))
temp_wrangle <- function(.data, rfs){
.data %>%
filter(rf %in% rfs) %>%
mutate(rf = ifelse(id == 1, rf, "")) %>%
dplyr::select(-id) %>%
setNames(c("", "", "MARB", "MRRMSE", "MIOP", "MARB", "MRRMSE", "MIOP"))
}
temp_df %>% temp_wrangle(c("smoking"))
S2_side <- c("Intercept only", "FE (non-varying)",
"FE (varying)",
"External latent field", "SA2 RE", "SA3 RE",
"Benchmarking")
# Function
rows_of_mbs2 <- function(i){
model_building[[i]]$s2 %>%
dplyr::select(contains(c("sa4_", "msb_"))) %>%
mutate(sa4_MARB = sa4_MARB * 100,
sa4_MRRMSE = sa4_MRRMSE * 100,
msb_MARB = msb_MARB * 100,
msb_MRRMSE = msb_MRRMSE * 100) %>%
make_numeric_decimal() %>%
mutate(specs = S2_side,
rf = names(model_building)[i]) %>%
relocate(rf, specs)%>%
mutate(id = 1:7)
}
temp_wrangle <- function(.data, rfs){
.data %>%
filter(rf %in% rfs) %>%
mutate(rf = ifelse(id == 1, rf, "")) %>%
dplyr::select(-id) %>%
setNames(c("", "", "MARB", "MRRMSE", "MIOP", "MARB", "MRRMSE", "MIOP"))
}
# Full table
temp_df <- bind_rows(lapply(1:8, rows_of_mbs2))
temp_df %>% temp_wrangle(c("smoking"))
S2_side <- c("Intercept only", "FE (non-varying)",
"FE (varying)",
"External latent field", "SA2 RE", "SA3 RE",
"Benchmarking")
# Function
rows_of_mbs2 <- function(i){
model_building[[i]]$s2 %>%
dplyr::select(contains(c("sa4_", "msb_"))) %>%
mutate(sa4_MARB = sa4_MARB * 100,
sa4_MRRMSE = sa4_MRRMSE * 100,
msb_MARB = msb_MARB * 100,
msb_MRRMSE = msb_MRRMSE * 100) %>%
make_numeric_decimal() %>%
mutate(specs = S2_side,
rf = names(model_building)[i]) %>%
relocate(rf, specs)%>%
mutate(id = 1:7)
}
temp_wrangle <- function(.data, rfs){
.data %>%
filter(rf %in% rfs) %>%
mutate(rf = ifelse(id == 1, rf, "")) %>%
dplyr::select(-id) %>%
setNames(c("", "", "MARB", "MRRMSE", "MIOP", "MARB", "MRRMSE", "MIOP"))
}
# Full table
temp_df <- bind_rows(lapply(1:8, rows_of_mbs2))
# split into two datasets of 4 and save
temp_df %>%
temp_wrangle(c("smoking", "alcohol", "diet", "obesity")) %>%
write.csv("out/tables/mbs2_1.csv")
temp_df %>%
temp_wrangle(c("overweight", "waist_circum", "activityleis", "activityleiswkpl")) %>%
write.csv("out/tables/mbs2_2.csv")
rm(temp_df, rows_of_mbs2, S2_side, tempSetNames)
rm(temp_df, rows_of_mbs2, S2_side, temp_wrangle)
modelled_est <- readRDS("C:/r_proj/ACAriskfactors/data/DataLabExport/modelled_est_smoking.rds")
library(tidyverse)
names(modelled_est)
dim(modelled_est$mu)
dim(modelled_est$or)
dim(modelled_est$mu_sa4)
dim(modelled_est$mu_msb)
summary(apply(modelled_est$mu))
summary(apply(modelled_est$mu, 2, median))
plot(modelled_est$mu[,1])
plot(modelled_est$mu[,2])
plot(modelled_est$mu[,6])
plot(modelled_est$mu[,2221])
# Packages
library(tidyverse)
library(scales)
library(sf)
library(MASS)
library(patchwork)
library(readr)
library(readxl)
library(gridExtra)
rm(list = ls())
base_folder <- "C:/r_proj/ACAriskfactors/out"
export <- FALSE
## Functions ## ----------------------------------------------------------------
source('src/functions_ALL.R')
jsave <- function(filename, base_folder,
plot = last_plot(),
square = T, square_size = 5000,
ratio = c(6,9)){
if(square){
ggsave(filename = filename,
plot = plot,
path = base_folder,
dpi = 1000,
width = square_size,
height = square_size,
scale = 1,
units = "px")
}else{
total = square_size^2
a <- sqrt((total*ratio[1])/ratio[2])
b <- (ratio[2]*a)/ratio[1]
ggsave(filename = filename,
plot = plot,
path = base_folder,
dpi = 1000,
width = round(b),
height = round(a),
scale = 1,
units = "px")
}
}
make_numeric_decimal <- function(.data, digits = 2){
df <- .data
cols_to_format <- unlist(lapply(df, is.numeric))
df[,cols_to_format] <- bind_cols(lapply(df[,cols_to_format], sprintf, fmt = paste0('%#.', digits, 'f')))
return(df)
}
addBoxLabel <- function(i, color = "white", size = 0.5){
if(lims$position[i] == "r"){
list(
annotate("rect",
xmin = lims$xmin[i], xmax = lims$xmax[i],
ymin = lims$ymin[i], ymax = lims$ymax[i],
color = color, fill = NA, size = size),
annotate("text", y = mean(c(lims$ymin[i], lims$ymax[i])),
x = lims$xmax[i] + 1, label = lims$initials[i],
size = 3)
)
} else if(lims$position[i] == "b"){
list(
annotate("rect",
xmin = lims$xmin[i], xmax = lims$xmax[i],
ymin = lims$ymin[i], ymax = lims$ymax[i],
color = color, fill = NA, size = size),
annotate("text", x = mean(c(lims$xmin[i], lims$xmax[i])),
y = lims$ymin[i] - 1, label = lims$initials[i],
size = 3)
)
} else if(lims$position[i] == "l"){
list(
annotate("rect",
xmin = lims$xmin[i], xmax = lims$xmax[i],
ymin = lims$ymin[i], ymax = lims$ymax[i],
color = color, fill = NA, size = size),
annotate("text", y = mean(c(lims$ymin[i], lims$ymax[i])),
x = lims$xmin[i] - 1, label = lims$initials[i],
size = 3)
)
}else{
list(
annotate("rect",
xmin = lims$xmin[i], xmax = lims$xmax[i],
ymin = lims$ymin[i], ymax = lims$ymax[i],
color = color, fill = NA, size = size),
annotate("text", x = mean(c(lims$xmin[i], lims$xmax[i])),
y = lims$ymax[i] + 1, label = lims$initials[i],
size = 3)
)
}
}
## Load Data ## ----------------------------------------------------------------
# state names
state_name_concor <- data.frame(ps_state = 1:8,
state_name_short = c("NSW", "VIC", "QLD",
"SA", "WA", "TAS",
"NT", "ACT"),
state_name = c("New South Wales",
"Victoria",
"Queensland",
"South Australia",
"Western Australia",
"Tasmania",
"Northern Territory",
"Australian Capital Territory"))
# Load global data
global_obj <- readRDS("data/DataLabExport/global_obj.rds")
# Load raw estimates
raw_est <- lapply(list.files("data/DataLabExport",
pattern = "raw_est_*", full.names = T), readRDS)
names(raw_est) <- str_remove(
str_remove(
list.files("data/DataLabExport", pattern = "raw_est_*"), "raw_est_"), ".rds")
# Load modelled estimates -- NOT COMPLETE
modelled_est <- pbapply::lapply(list.files("data/DataLabExport",
pattern = "modelled_est_*", full.names = T), readRDS)
# Load modelled estimates -- NOT COMPLETE
modelled_est <- lapply(list.files("data/DataLabExport",
pattern = "modelled_est_*", full.names = T), readRDS)
str_remove(
str_remove(
list.files("data/DataLabExport", pattern = "modelled_est_*"), "modelled_est_"), ".rds")
names(modelled_est) <- str_remove(
str_remove(
list.files("data/DataLabExport", pattern = "modelled_est_*"), "modelled_est_"), ".rds")
names(modelled_est)
sf_list <- list()
# Benchmark status
#bench_status <- ifelse(QwS == QwS_length, "", "_nb")
## Posterior draws ## ----
sf_list$draws$mu <- modelled_est$mu
sf_list$draws$or <- modelled_est$or
sf_list$draws$mu_sa4 <- modelled_est$mu_sa4
sf_list$draws$mu_msb <- modelled_est$mu_msb
# spatially lagged values
sf_list$draws$mu_spo1 <- (sf_list$draws$mu) %*% t(global_obj$W/rowSums(global_obj$W))
dim(global_obj$W)
rowSums(global_obj$W)
dim(sf_list$draws$mu)
i <- 1
# create empty list
sf_list <- list()
# Benchmark status
#bench_status <- ifelse(QwS == QwS_length, "", "_nb")
## Posterior draws ## ----
sf_list$draws$mu <- modelled_est[[i]]$mu
sf_list$draws$or <- modelled_est[[i]]$or
sf_list$draws$mu_sa4 <- modelled_est[[i]]$mu_sa4
sf_list$draws$mu_msb <- modelled_est[[i]]$mu_msb
# spatially lagged values
sf_list$draws$mu_spo1 <- (sf_list$draws$mu) %*% t(global_obj$W/rowSums(global_obj$W))
W_sq <- global_obj$W %*% global_obj$W
sf_list$draws$mu_spo2 <- (sf_list$draws$mu) %*% t(W_sq/rowSums(W_sq))
rm(W_sq)
# Cluster analysis
sf_list$draws$orc <- (sf_list$draws$or - 1)
sf_list$draws$orc_lag <- (sf_list$draws$or - 1) %*% t(global_obj$W/rowSums(global_obj$W))
## Posterior summary ## ----
mu <- getMCMCsummary(sf_list$draws$mu, prefix = "mu_", model_name = rf) %>% apa()
muspo1 <- getMCMCsummary(sf_list$draws$mu_spo1, prefix = "muspo1_") %>% apa()
muspo2 <- getMCMCsummary(sf_list$draws$mu_spo2, prefix = "muspo2_") %>% apa()
or <- getMCMCsummary(sf_list$draws$or, prefix = "or_") %>% apa()
sf_list$summ$sa4 <- s2LN_list$sa4_summ %>% mutate(ps_sa4 = 1:nrow(.)) %>% relocate(ps_sa4)
sf_list$summ$msb <- getMCMCsummary(sf_list$draws$mu_msb, prefix = "mu_", model_name = rf) %>% mutate(ps_majorstatebench = 1:nrow(.)) %>% relocate(ps_majorstatebench)
sf_list$summ$mus1 <- s2LN_list$data$s1_summ
# small function
apa <- function(.data, .m_n = FALSE, model_name = NULL){
if(.m_n){
temp <- .data %>%
mutate(ps_area = 1:nrow(.),
model = model_name)
}else{
temp <- .data %>%
mutate(ps_area = 1:nrow(.))
}
}
mu <- getMCMCsummary(sf_list$draws$mu, prefix = "mu_", model_name = rf) %>% apa()
names(modelled_est)[i]
rf <- names(modelled_est)[i]
mu <- getMCMCsummary(sf_list$draws$mu, prefix = "mu_", model_name = rf) %>% apa()
mu
muspo1 <- getMCMCsummary(sf_list$draws$mu_spo1, prefix = "muspo1_") %>% apa()
muspo2 <- getMCMCsummary(sf_list$draws$mu_spo2, prefix = "muspo2_") %>% apa()
or <- getMCMCsummary(sf_list$draws$or, prefix = "or_") %>% apa()
sf_list$summ$sa4 <- s2LN_list$sa4_summ %>% mutate(ps_sa4 = 1:nrow(.)) %>% relocate(ps_sa4)
sf_list$summ$msb <- getMCMCsummary(sf_list$draws$mu_msb, prefix = "mu_", model_name = rf) %>% mutate(ps_majorstatebench = 1:nrow(.)) %>% relocate(ps_majorstatebench)
sf_list$summ$mus1 <- s2LN_list$data$s1_summ
DPP_mu <- bind_cols(getDPP(sf_list$draws$mu, null_value = raw_est[[i]]$national[1])) %>%
setNames(paste0("mu_", names(.))) %>% apa()
DPP_or <- bind_cols(getDPP(sf_list$draws$or, null_value = 1)) %>%
setNames(paste0("or_", names(.))) %>% apa()
sf_list$summ$sa2 <- list(mu, muspo1, muspo2, DPP_mu, or, DPP_or) %>%
reduce(inner_join, by = "ps_area") %>%
mutate(LISA = as.factor(getLISA(sf_list$draws$orc, sf_list$draws$orc_lag))) %>%
left_join(.,global_obj$census, by = "ps_area") %>%
left_join(.,sf_list$summ$mus1, by = "ps_area") %>%
mutate(RRSE = 100*(HT_SE - mu_sd)/HT_SE)
sf_list$summ$sa2_map <- sf_list$summ$sa2 %>%
left_join(.,map_sa2, by = c("ps_area", "SA2")) %>% sf::st_as_sf()
list(mu, muspo1, muspo2, DPP_mu, or, DPP_or) %>%
reduce(inner_join, by = "ps_area") %>%
mutate(LISA = as.factor(getLISA(sf_list$draws$orc, sf_list$draws$orc_lag)))
sf_list$summ$sa2 <- list(mu, muspo1, muspo2, DPP_mu, or, DPP_or) %>%
reduce(inner_join, by = "ps_area") %>%
mutate(LISA = as.factor(getLISA(sf_list$draws$orc, sf_list$draws$orc_lag))) %>%
left_join(.,global_obj$census, by = "ps_area") %>%
mutate(RRSE = 100*(HT_SE - mu_sd)/HT_SE)
sf_list$summ$sa2 <- list(mu, muspo1, muspo2, DPP_mu, or, DPP_or) %>%
reduce(inner_join, by = "ps_area") %>%
mutate(LISA = as.factor(getLISA(sf_list$draws$orc, sf_list$draws$orc_lag))) %>%
left_join(.,global_obj$census, by = "ps_area")
sf_list$summ$sa2_map <- sf_list$summ$sa2 %>%
left_join(.,map_sa2, by = c("ps_area", "SA2")) %>% sf::st_as_sf()
# Load map
map_sa2_full <- st_read("C:/r_proj/ACAriskfactors/data/2016_SA2_Shape_min/2016_SA2_Shape_min.shp") %>%
mutate(SA2 = as.numeric(SA2_MAIN16)) %>%
filter(!str_detect(SA2_NAME, "Island")) %>%
filter(STATE_NAME != "Other Territories")
map_sa2 <- map_sa2_full %>%
right_join(.,global_obj$area_concor, by = "SA2")
sf_list$summ$sa2_map <- sf_list$summ$sa2 %>%
left_join(.,map_sa2, by = c("ps_area", "SA2")) %>% sf::st_as_sf()
sf_list$summ$sa2_map %>% ggplot(aes(fill = mu_median))+geom_sf()
sf_list$summ$sa2 %>% glimpse()
sf_list$summ$sa2_map %>% ggplot(aes(fill = or_median))+geom_sf()
sf_list$summ$sa2_map %>% ggplot(aes(fill = log(or_median)))+geom_sf()
