square = F)
# cleanup
rm(base, income, lay, full_inset_plt)
message("---- Finished sydney cutout")
source("src/ms.R")
# get best range
col_out <- getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05)
k <- 1
rf <- names(raw_est)[k]
rf_full <- lookup[k,]$rf_full
message("Started ", k, ": ", rf)
# load data
modelled_est <- readRDS(file = paste0("data/summary_files/", rf, "_b1.rds"))
# get best range
col_out <- getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05)
log(0.8,1,1.2)
log(c(0.8,1,1.2))
log(c(-0.2,0,0.2))
# get best range
col_out <- getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05)
col_out
col_out <- getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05)
# SETUP
cut_offs <- c(1/col_out$cut_point, col_out$cut_point)
mapping_data <- modelled_est$summ$sa2_map %>%
mutate() %>%
mutate(rr_median = ifelse(rr_median > cut_offs[2], cut_offs[2], rr_median),
rr_median = ifelse(rr_median < cut_offs[1], cut_offs[1], rr_median))
# define fill colours
Fill.colours <- c("#2C7BB6", "#2C7BB6", "#ABD9E9", "#FFFFBF", "#FDAE61", "#D7191C", "#D7191C")
End <- col_out$End
Breaks.fill <- col_out$Breaks.fill
Fill.values <-col_out$Fill.values
mapping_data %>%
ggplot(aes(fill = log(rr_median)))+
theme_void()+
geom_sf(col = NA)+
scale_fill_gradientn(colors = Fill.colours,
values = rescale(Fill.values),
labels = as.character(round(Breaks.fill, 2)),
breaks = log(Breaks.fill),
limits = range(Fill.values))+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
mapping_data %>%
ggplot(aes(fill = log(rr_median)))+
theme_void()+
geom_sf(col = NA)+
scale_fill_gradientn(colors = Fill.colours,
values = rescale(Fill.values),
labels = as.character(round(Breaks.fill, 2)),
breaks = log(Breaks.fill),
limits = range(Fill.values))+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
col_out
Breaks.fill <- c(0.9, 0.95,1,1.05,1.1)
Fill.values <- c(0.89, Breaks.fill, 1.11)
mapping_data %>%
ggplot(aes(fill = log(rr_median)))+
theme_void()+
geom_sf(col = NA)+
scale_fill_gradientn(colors = Fill.colours,
values = rescale(Fill.values),
labels = as.character(round(Breaks.fill, 2)),
breaks = Breaks.fill,
limits = range(Fill.values))+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
Breaks.fill <- c(0.9, 0.95,1,1.05,1.1)
Fill.values <- c(0.89, Breaks.fill, 1.11)
mapping_data %>%
ggplot(aes(fill = rr_median))+
theme_void()+
geom_sf(col = NA)+
scale_fill_gradientn(colors = Fill.colours,
values = rescale(Fill.values),
labels = as.character(round(Breaks.fill, 2)),
breaks = Breaks.fill,
limits = range(Fill.values))+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
source('src/wrangle/moreFuns.R')
# get best range
col_out <- getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05)
col_out
?seq(1,1.1)
seq(1,1.1, lengh.out = 3)[-1]
seq(1,1.1, length.out = 3)[-1]
diff(seq(1,1.1, length.out = 3)[-1])
seq(1,1.1, by = 0.5)
seq(1,1.1, by = 0.05)
1-2*diff(seq(1,1.1, length.out = 3)[-1])
source('src/wrangle/moreFuns.R')
# get best range
col_out <- getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05)
# get best range
getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05, log_scale = F)
source('src/wrangle/moreFuns.R')
# get best range
getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05, log_scale = F)
# get best range
getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05, log_scale = T)
k ,- 6
k <- 6
rf <- names(raw_est)[k]
rf_full <- lookup[k,]$rf_full
message("Started ", k, ": ", rf)
# load data
modelled_est <- readRDS(file = paste0("data/summary_files/", rf, "_b1.rds"))
getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05)
getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05, log_scale = F)
source('src/wrangle/moreFuns.R')
getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05, log_scale = F)
source('src/wrangle/moreFuns.R')
getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05, log_scale = F)
getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05, log_scale = T)
getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.02, log_scale = T)
getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.02, log_scale = F)
col_out <- getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05)
# SETUP
cut_offs <- col_out$cut_point
mapping_data <- modelled_est$summ$sa2_map %>%
mutate() %>%
mutate(rr_median = ifelse(rr_median > cut_offs[2], cut_offs[2], rr_median),
rr_median = ifelse(rr_median < cut_offs[1], cut_offs[1], rr_median))
# define fill colours
Fill.colours <- c("#2C7BB6", "#2C7BB6", "#ABD9E9", "#FFFFBF", "#FDAE61", "#D7191C", "#D7191C")
Breaks.fill <- col_out$Breaks.fill
Fill.values <-col_out$Fill.values
mapping_data %>%
ggplot(aes(fill = log(rr_median)))+
theme_void()+
geom_sf(col = NA)+
scale_fill_gradientn(colors = Fill.colours,
values = rescale(Fill.values),
labels = as.character(round(Breaks.fill, 2)),
breaks = log(Breaks.fill),
limits = range(Fill.values))+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
col_out$cut_point
col_out <- getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05)
# SETUP
cut_offs <- col_out$cut_offs
mapping_data <- modelled_est$summ$sa2_map %>%
mutate() %>%
mutate(rr_median = ifelse(rr_median > cut_offs[2], cut_offs[2], rr_median),
rr_median = ifelse(rr_median < cut_offs[1], cut_offs[1], rr_median))
# define fill colours
Fill.colours <- c("#2C7BB6", "#2C7BB6", "#ABD9E9", "#FFFFBF", "#FDAE61", "#D7191C", "#D7191C")
Breaks.fill <- col_out$Breaks.fill
Fill.values <-col_out$Fill.values
mapping_data %>%
ggplot(aes(fill = log(rr_median)))+
theme_void()+
geom_sf(col = NA)+
scale_fill_gradientn(colors = Fill.colours,
values = rescale(Fill.values),
labels = as.character(round(Breaks.fill, 2)),
breaks = log(Breaks.fill),
limits = range(Fill.values))+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
col_out
## -----------------------------------------------------------------------------
## Setup ## --------------------------------------------------------------------
## -----------------------------------------------------------------------------
# Packages
library(tidyverse)
library(scales)
library(sf)
library(MASS)
library(patchwork)
library(readr)
library(readxl)
library(grid)
library(gridExtra)
library(Matrix)
rm(list = ls())
base_folder <- "C:/r_proj/ACAriskfactors/out"
## Functions ## ----------------------------------------------------------------
source('src/wrangle/functions_ALL.R')
source('src/wrangle/moreFuns.R')
## Load Data ## ----------------------------------------------------------------
# Load global data
global_obj <- readRDS("data/DataLabExport/global_obj.rds")
# Load raw estimates
raw_est <- pbapply::pblapply(list.files("data/DataLabExport",
pattern = "raw_est_*", full.names = T), readRDS)
names(raw_est) <- str_remove(
str_remove(
list.files("data/DataLabExport", pattern = "raw_est_*"), "raw_est_"), ".rds")
# Load all modelled estimates
summsa2all <- readRDS("data/summary_files/summsa2all.rds")
# Model building
model_building <- lapply(list.files("data/DataLabExport",
pattern = "model_building_*", full.names = T), readRDS)
names(model_building) <- str_remove(
str_remove(
list.files("data/DataLabExport", pattern = "model_building_*"), "model_building_"), ".rds")
# Load map
map_sa2_full <- st_read("C:/r_proj/ACAriskfactors/data/2016_SA2_Shape_min/2016_SA2_Shape_min.shp") %>%
mutate(SA2 = as.numeric(SA2_MAIN16)) %>%
filter(!str_detect(SA2_NAME, "Island")) %>%
filter(STATE_NAME != "Other Territories")
# keep non-estimated geometries
map_sa2 <- map_sa2_full %>%
left_join(.,global_obj$area_concor, by = "SA2")
# Australia outline
aus_border <- suppressMessages(map_sa2 %>%
summarise(geometry = st_union(geometry)) %>%
st_as_sf() %>%
st_transform(4326))
# State outline
state_border <- suppressMessages(map_sa2 %>%
mutate(state = str_sub(SA2, 1, 1)) %>%
group_by(state, STATE_NAME) %>%
summarise(geometry = st_union(geometry), .groups = "drop") %>%
filter(!st_is_empty(.)) %>%
#mutate(st_init = c("NSW", "VIC", "QLD", "SA", "WA", NA, "NT", NA)) %>%
st_as_sf() %>%
st_transform(4326))
## Other code ## --------------------------------------------------------------
# City Insets
lims <- data.frame(
xmin = c(152.6, 150.35, 144.5, 115.45, 138.1, 146.8, 148.6, 130.3),
xmax = c(153.6, 151.35, 145.5, 116.45, 139.1, 147.8, 149.6, 131.3),
ymin = -c(28, 34.4, 38.4, 32.5, 35.4, 43.4, 35.8, 13),
ymax = -c(27, 33.4, 37.4, 31.5, 34.4, 42.4, 34.8, 12),
city = c("Brisbane", "Sydney", "Melbourne", "Perth", "Adelaide", "Hobart", "Canberra", "Darwin"),
position = c("r", "r", "b", "l", "b", "b", "r", "l"),
inset_labs = c("B - Brisbane (Qld)", "S - Sydney (NSW)",
"M - Melbourne (Vic)", "P - Perth (WA)",
"A - Adelaide (SA)", "H - Hobart (Tas)",
"C - Canberra (ACT)", "D - Darwin (NT)")
) %>%
mutate(initials = str_sub(city, 1, 1))
# quantiles for IRSD
irsd_5c <- mutate(global_obj$census,
irsd_5c = case_when(
ABS_irsd_decile_nation_complete %in% c("1", "2") ~ "1 - most\ndisadvantaged",
ABS_irsd_decile_nation_complete %in% c("3", "4") ~ "2",
ABS_irsd_decile_nation_complete %in% c("5", "6") ~ "3",
ABS_irsd_decile_nation_complete %in% c("7", "8") ~ "4",
ABS_irsd_decile_nation_complete %in% c("9", "10") ~ "5 - least\ndisadvantaged"
)) %>%
dplyr::select(ps_area, irsd_5c)
# Full names
lookup <- data.frame(rf = names(raw_est),
rf_full = c("Leisure physical activity",
"All physical activity",
"Alcohol",
"Diet",
"Obesity",
"Overweight",
"Current smoking",
"Risky waist circumference"))
# Full names2
lookup <- data.frame(rf = names(raw_est),
sha = c("exercise", "exercise", "alcohol",
"fruit", "obese", "overweight",
"smoking", "overweight"),
rf_full = c("Inadequate physical activity (leisure)",
"Inadequate physical activity (all)",
"Risky alcohol consumption",
"Inadequate diet",
"Obesity",
"Overweight",
"Current smoking",
"Risky waist circumference"))
## Load PHA SHA data ## --------------------------------------------------------
source("src/wrangle/getSHA.R")
## Load census data ## ---------------------------------------------------------
source("src/wrangle/loadCensusData.R")
## END SCRIPT ## --------------------------------------------------------------
summsa2all %>%
group_by(model) %>%
mutate(z = scale(mu_median)[,1])
summsa2all %>%
group_by(model) %>%
mutate(z = scale(mu_median)[,1]) %>%
ggplot(aes(y = z, N_persons))+
geom_point()
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 10, labels = FALSE)) %>%
ggplot(aes(y = pc1_c, col = ABS_irsd_decile_nation_complete))+
geom_bar(position = "fill")
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 10, labels = FALSE)) %>%
ggplot(aes(y = pc1_c, fill = ABS_irsd_decile_nation_complete))+
geom_bar(position = "fill")
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 20, labels = FALSE)) %>%
ggplot(aes(y = pc1_c, fill = ABS_irsd_decile_nation_complete))+
geom_bar(position = "fill")
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 20, labels = FALSE)) %>%
group_by(pc1_c,ABS_irsd_decile_nation_complete ) %>%
tally()
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 20, labels = FALSE)) %>%
ggplot(aes(y = pc1_c, fill = ABS_irsd_decile_nation_complete))+
geom_bar(position = "fill")
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE)) %>%
ggplot(aes(y = pc1_c, fill = irsd_5c))+
geom_bar(position = "fill")
global_obj$census %>%
left_join(.,irsd_5c, by = "ps_area") %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE)) %>%
ggplot(aes(y = pc1_c, fill = irsd_5c))+
geom_bar(position = "fill")
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE)) %>%
ggplot(aes(y = PC1, fill = ABS_irsd_decile_nation_complete))+
geom_bar(position = "fill")
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE)) %>%
ggplot(aes(y = PC1, fill = ABS_irsd_decile_nation_complete))+
geom_violin()
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE)) %>%
ggplot(aes(y = PC1, x = ABS_irsd_decile_nation_complete))+
geom_violin()
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE)) %>%
ggplot(aes(y = PC1, x = ABS_irsd_decile_nation_complete))+
theme_bw()+
geom_violin()
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE)) %>%
ggplot(aes(x = PC1, y = ABS_irsd_decile_nation_complete))+
theme_bw()+
geom_violin()
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE)) %>%
ggplot(aes(x = PC1, y = ABS_irsd_decile_nation_complete))+
theme_bw()+
geom_violin()+
labs(y = "")
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE),
ABS_irsd_decile_nation_complete = factor(ABS_irsd_decile_nation_complete,
levels = 1:10,
labels = c("Most\ndisadvantaged",
as.character(2:9),
"Least\ndisadvantaged"))) %>%
ggplot(aes(x = PC1, y = ABS_irsd_decile_nation_complete))+
theme_bw()+
geom_violin()+
labs(y = "")
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE),
ABS_irsd_decile_nation_complete = factor(ABS_irsd_decile_nation_complete,
levels = 1:10,
labels = c("Most\ndisadvantaged",
as.character(2:9),
"Least\ndisadvantaged"))) %>%
ggplot(aes(x = PC1, y = ABS_irsd_decile_nation_complete))+
theme_bw()+
geom_violin()+
labs(y = "")+
facet_grid(.~ra_sa2_3c)
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE),
ABS_irsd_decile_nation_complete = factor(ABS_irsd_decile_nation_complete,
levels = 1:10,
labels = c("Most\ndisadvantaged",
as.character(2:9),
"Least\ndisadvantaged"))) %>%
ggplot(aes(x = PC1, y = ABS_irsd_decile_nation_complete, col = ra_sa2_3c))+
theme_bw()+
geom_violin()+
labs(y = "")
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE),
ABS_irsd_decile_nation_complete = factor(ABS_irsd_decile_nation_complete,
levels = 1:10,
labels = c("Most\ndisadvantaged",
as.character(2:9),
"Least\ndisadvantaged"))) %>%
ggplot(aes(x = PC1, y = ABS_irsd_decile_nation_complete))+
theme_bw()+
geom_violin()+
labs(y = "")
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE),
ABS_irsd_decile_nation_complete = factor(ABS_irsd_decile_nation_complete,
levels = 1:10,
labels = c("Most\ndisadvantaged",
as.character(2:9),
"Least\ndisadvantaged"))) %>%
ggplot(aes(x = PC2, y = ABS_irsd_decile_nation_complete))+
theme_bw()+
geom_violin()+
labs(y = "")
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE),
ABS_irsd_decile_nation_complete = factor(ABS_irsd_decile_nation_complete,
levels = 1:10,
labels = c("Most\ndisadvantaged",
as.character(2:9),
"Least\ndisadvantaged"))) %>%
ggplot(aes(x = PC3, y = ABS_irsd_decile_nation_complete))+
theme_bw()+
geom_violin()+
labs(y = "")
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE),
ABS_irsd_decile_nation_complete = factor(ABS_irsd_decile_nation_complete,
levels = 1:10,
labels = c("Most\ndisadvantaged",
as.character(2:9),
"Least\ndisadvantaged"))) %>%
ggplot(aes(x = PC4, y = ABS_irsd_decile_nation_complete))+
theme_bw()+
geom_violin()+
labs(y = "")
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE),
ABS_irsd_decile_nation_complete = factor(ABS_irsd_decile_nation_complete,
levels = 1:10,
labels = c("Most\ndisadvantaged",
as.character(2:9),
"Least\ndisadvantaged"))) %>%
ggplot(aes(x = PC1, y = ABS_irsd_decile_nation_complete))+
theme_bw()+
geom_violin()+
labs(y = "")
global_obj$census %>%
mutate(pc1_c = cut_number(PC1, 5, labels = FALSE),
ABS_irsd_decile_nation_complete = factor(ABS_irsd_decile_nation_complete,
levels = 1:10,
labels = c("Most\ndisadvantaged",
as.character(2:9),
"Least\ndisadvantaged"))) %>%
ggplot(aes(x = PC1, y = ABS_irsd_decile_nation_complete))+
theme_bw()+
geom_violin()+
labs(y = "")
# save object
jsave(filename = paste0("pc1_vs_irsd.png"),
base_folder = paste0(base_folder, "/figures"),
square = F)
summsa2all %>%
group_by(model) %>%
mutate(z = scale(mu_median)[,1]) %>%
ggplot(aes(y = z, N_persons))+
geom_point()
summsa2all %>%
group_by(model) %>%
mutate(z = scale(mu_median)[,1]) %>%
ggplot(aes(y = z, N_persons))+
geom_point()+
facet_wrap(.~modekl)
summsa2all %>%
group_by(model) %>%
mutate(z = scale(mu_median)[,1]) %>%
ggplot(aes(y = z, N_persons))+
geom_point()+
facet_wrap(.~model)
summsa2all %>%
group_by(model) %>%
mutate(z = scale(mu_median)[,1]) %>%
ggplot(aes(y = z, N_persons))+
geom_point()+
geom_hline(yintercept = c(-3,3))+
facet_wrap(.~model)
summsa2all %>%
group_by(model) %>%
mutate(z = scale(mu_median)[,1]) %>%
ggplot(aes(y = z, log(N_persons)))+
geom_point()+
geom_hline(yintercept = c(-3,3))+
facet_wrap(.~model)
summsa2all %>% ggplot(aes(x = mu_median))+geom_density()+facet_wrap(.~model)
summsa2all %>% ggplot(aes(x = rr_median))+geom_density()+facet_wrap(.~model)
summsa2all %>% ggplot(aes(x = or_median))+geom_density()+facet_wrap(.~model)
