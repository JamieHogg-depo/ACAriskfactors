foo <- function(ps_area){
SA2_selected = global_obj$area_concor[global_obj$area_concor$ps_area == ps_area,]$SA2
data.frame(rr = smoking_b1_full$draws$mu[,ps_area]/raw_est$smoking$national[1],
or = smoking_b1_full$draws$or[,ps_area]) %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, col = name))+theme_bw()+
geom_density()+
labs(subtitle = paste0("National average: ", round(raw_est$smoking$national[1], 3)),
title = paste0("Posterior median for SA2: ", SA2_selected, " is ", round(median(smoking_b1_full$draws$mu[,ps_area]), 3)))
}
foo(8444)
foo(844)
foo <- function(ps_area){
SA2_selected = global_obj$area_concor[global_obj$area_concor$ps_area == ps_area,]$SA2
data.frame(rr = smoking_b1_full$draws$mu[,ps_area]/raw_est$smoking$national[1],
or = smoking_b1_full$draws$or[,ps_area]) %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, col = name))+theme_bw()+
geom_density()+
labs(subtitle = paste0("National average: ", round(raw_est$smoking$national[1], 3)),
title = paste0("Posterior proportion median for SA2: ", SA2_selected, " is ", round(median(smoking_b1_full$draws$mu[,ps_area]), 3)))
}
foo(844)
foo(843)
foo(2193)
foo <- function(ps_area){
SA2_selected = global_obj$area_concor[global_obj$area_concor$ps_area == ps_area,]$SA2
data.frame(rr = smoking_b1_full$draws$mu[,ps_area]/raw_est$smoking$national[1],
or = smoking_b1_full$draws$or[,ps_area]) %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, col = name))+theme_bw()+
geom_density()+
xlim(0,20)+
labs(subtitle = paste0("National average: ", round(raw_est$smoking$national[1], 3)),
title = paste0("Posterior proportion median for SA2: ", SA2_selected, " is ", round(median(smoking_b1_full$draws$mu[,ps_area]), 3)))
}
foo(2193)
foo <- function(ps_area){
SA2_selected = global_obj$area_concor[global_obj$area_concor$ps_area == ps_area,]$SA2
data.frame(rr = smoking_b1_full$draws$mu[,ps_area]/raw_est$smoking$national[1],
or = smoking_b1_full$draws$or[,ps_area]) %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, col = name))+theme_bw()+
geom_density()+
xlim(0,30)+
labs(subtitle = paste0("National average: ", round(raw_est$smoking$national[1], 3)),
title = paste0("Posterior proportion median for SA2: ", SA2_selected, " is ", round(median(smoking_b1_full$draws$mu[,ps_area]), 3)))
}
foo(2193)
data.frame(rr = smoking_b1_full$draws$mu[,ps_area]/raw_est$smoking$national[1],
or = smoking_b1_full$draws$or[,ps_area]) %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, col = name))+theme_bw()+
geom_density()+
xlim(0,30)+
geom_vline(xintercept = 1)+
labs(subtitle = paste0("National average: ", round(raw_est$smoking$national[1], 3)),
title = paste0("Posterior proportion median for SA2: ", SA2_selected, " is ", round(median(smoking_b1_full$draws$mu[,ps_area]), 3)))
foo <- function(ps_area){
SA2_selected = global_obj$area_concor[global_obj$area_concor$ps_area == ps_area,]$SA2
data.frame(rr = smoking_b1_full$draws$mu[,ps_area]/raw_est$smoking$national[1],
or = smoking_b1_full$draws$or[,ps_area]) %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, col = name))+theme_bw()+
geom_density()+
xlim(0,30)+
geom_vline(xintercept = 1)+
labs(subtitle = paste0("National average: ", round(raw_est$smoking$national[1], 3)),
title = paste0("Posterior proportion median for SA2: ", SA2_selected, " is ", round(median(smoking_b1_full$draws$mu[,ps_area]), 3)))
}
data.frame(rr = smoking_b1_full$draws$mu[,ps_area]/raw_est$smoking$national[1],
or = smoking_b1_full$draws$or[,ps_area]) %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, col = name))+theme_bw()+
geom_density()+
xlim(0,30)+
geom_vline(xintercept = 1)+
labs(subtitle = paste0("National average: ", round(raw_est$smoking$national[1], 3)),
title = paste0("Posterior proportion median for SA2: ", SA2_selected, " is ", round(median(smoking_b1_full$draws$mu[,ps_area]), 3)))
foo(2193)
foo(844)
obesity_b1_full <- readRDS("C:/r_proj/ACAriskfactors/data/summary_files/obesity_b1_full.rds")
foo <- function(which_full, ps_area){
SA2_selected = global_obj$area_concor[global_obj$area_concor$ps_area == ps_area,]$SA2
data.frame(rr = which_full$draws$mu[,ps_area]/raw_est$smoking$national[1],
or = which_full$draws$or[,ps_area]) %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, col = name))+theme_bw()+
geom_density()+
xlim(0,30)+
geom_vline(xintercept = 1)+
labs(subtitle = paste0("National average: ", round(raw_est$smoking$national[1], 3)),
title = paste0("Posterior proportion median for SA2: ", SA2_selected, " is ", round(median(which_full$draws$mu[,ps_area]), 3)))
}
foo(obesity_b1_full, 343)
foo <- function(which_full, ps_area){
SA2_selected = global_obj$area_concor[global_obj$area_concor$ps_area == ps_area,]$SA2
data.frame(rr = which_full$draws$mu[,ps_area]/raw_est$smoking$national[1],
or = which_full$draws$or[,ps_area]) %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, col = name))+theme_bw()+
geom_density()+
#xlim(0,30)+
geom_vline(xintercept = 1)+
labs(subtitle = paste0("National average: ", round(raw_est$smoking$national[1], 3)),
title = paste0("Posterior proportion median for SA2: ", SA2_selected, " is ", round(median(which_full$draws$mu[,ps_area]), 3)))
}
foo(obesity_b1_full, 343)
foo <- function(which_full, ps_area, rf){
SA2_selected = global_obj$area_concor[global_obj$area_concor$ps_area == ps_area,]$SA2
data.frame(rr = which_full$draws$mu[,ps_area]/raw_est[[rf]]$national[1],
or = which_full$draws$or[,ps_area]) %>%
pivot_longer(everything()) %>%
ggplot(aes(x = value, col = name))+theme_bw()+
geom_density()+
#xlim(0,30)+
geom_vline(xintercept = 1)+
labs(subtitle = paste0("National average: ", round(raw_est[[rf]]$national[1], 3)),
title = paste0("Posterior proportion median for SA2: ", SA2_selected, " is ", round(median(which_full$draws$mu[,ps_area]), 3)))
}
foo(obesity_b1_full, 343, "obesity")
obesity_b1_full$summ$sa2
obesity_b1_full$summ$sa2 %>% view()
raw_est[["obesity"]]$national
foo(obesity_b1_full, 1986, "obesity")
getIT <- function(aust.prev){
aust.odds <- aust.prev/(1-aust.prev)
adj_amt <- 0.5-aust.prev
draws.prev <- rnorm(6000, aust.prev + 0.06, 0.04)
draws.prev <- ifelse(draws.prev > 1, 0.99, draws.prev)
draws.prev <- ifelse(draws.prev < 0, 0.01, draws.prev)
#draws.rr <- (draws.prev + adj_amt)/(aust.prev + adj_amt)
draws.rr <- draws.prev/aust.prev
draws.odds <- draws.prev/(1-draws.prev)
draws.or = draws.odds/aust.odds
data.frame(
OR_p = median(draws.or),
OR_sd = sd(draws.or),
RR_p = median(draws.rr),
lRR_p = log2(median(draws.rr)),
RR_sd = sd(draws.rr)
)
}
# for loop
grid <- data.frame(aust.prev = rep(seq(0.1, 0.9, 0.01), 100))
out <- list()
for(i in 1:nrow(grid)){
out[[i]] <- getIT(grid$aust.prev[i])
}
data <- bind_cols(grid, bind_rows(out))
with(data, plot(aust.prev, OR_p))
with(data, plot(aust.prev, RR_p))
with(data, plot(aust.prev, lRR_p))
# More
getIT <- function(aust.prev){
aust.odds <- aust.prev/(1-aust.prev)
adj_amt <- 0.5-aust.prev
draws.prev <- rnorm(6000, aust.prev + 0.06, 0.04)
draws.prev <- ifelse(draws.prev > 1, 0.99, draws.prev)
draws.prev <- ifelse(draws.prev < 0, 0.01, draws.prev)
#draws.rr <- (draws.prev + adj_amt)/(aust.prev + adj_amt)
draws.rr <- draws.prev/aust.prev
draws.odds <- draws.prev/(1-draws.prev)
draws.or = draws.odds/aust.odds
data.frame(
OR_p = median(draws.or),
OR_sd = sd(draws.or),
RR_p = median(draws.rr),
lRR_p = median(log2(draws.rr)),
RR_sd = sd(draws.rr)
)
}
# for loop
grid <- data.frame(aust.prev = rep(seq(0.1, 0.9, 0.01), 100))
out <- list()
for(i in 1:nrow(grid)){
out[[i]] <- getIT(grid$aust.prev[i])
}
data <- bind_cols(grid, bind_rows(out))
with(data, plot(aust.prev, OR_p))
with(data, plot(aust.prev, RR_p))
with(data, plot(aust.prev, lRR_p))
summsa2all %>% dplyr::select(model, or_median, rr_median) %>% pivot_longer(-model)
summsa2all %>% dplyr::select(model, or_median, rr_median) %>% pivot_longer(-model) %>% ggplot(aes(y = value, x = model, col = name))+geom_boxplot()
source("src/ms.R")
listw <- spdep::mat2listw(global_obj$W)
raw_est <- pbapply::pblapply(list.files("data/DataLabExport",
pattern = "raw_est_*", full.names = T), readRDS)
names(raw_est) <- str_remove(
str_remove(
list.files("data/DataLabExport", pattern = "raw_est_*"), "raw_est_"), ".rds")
# Load all modelled estimates
summsa2all <- readRDS("data/summary_files/summsa2all.rds")
# Model building
model_building <- lapply(list.files("data/DataLabExport",
pattern = "model_building_*", full.names = T), readRDS)
names(model_building) <- str_remove(
str_remove(
list.files("data/DataLabExport", pattern = "model_building_*"), "model_building_"), ".rds")
# Load map
map_sa2_full <- st_read("C:/r_proj/ACAriskfactors/data/2016_SA2_Shape_min/2016_SA2_Shape_min.shp") %>%
mutate(SA2 = as.numeric(SA2_MAIN16)) %>%
filter(!str_detect(SA2_NAME, "Island")) %>%
filter(STATE_NAME != "Other Territories")
# keep non-estimated geometries
map_sa2 <- map_sa2_full %>%
left_join(.,global_obj$area_concor, by = "SA2")
# Australia outline
aus_border <- suppressMessages(map_sa2 %>%
summarise(geometry = st_union(geometry)) %>%
st_as_sf() %>%
st_transform(4326))
# State outline
state_border <- suppressMessages(map_sa2 %>%
mutate(state = str_sub(SA2, 1, 1)) %>%
group_by(state, STATE_NAME) %>%
summarise(geometry = st_union(geometry), .groups = "drop") %>%
filter(!st_is_empty(.)) %>%
#mutate(st_init = c("NSW", "VIC", "QLD", "SA", "WA", NA, "NT", NA)) %>%
st_as_sf() %>%
st_transform(4326))
## Other code ## --------------------------------------------------------------
# City Insets
lims <- data.frame(
xmin = c(152.6, 150.35, 144.5, 115.45, 138.1, 146.8, 148.6, 130.3),
xmax = c(153.6, 151.35, 145.5, 116.45, 139.1, 147.8, 149.6, 131.3),
ymin = -c(28, 34.4, 38.4, 32.5, 35.4, 43.4, 35.8, 13),
ymax = -c(27, 33.4, 37.4, 31.5, 34.4, 42.4, 34.8, 12),
city = c("Brisbane", "Sydney", "Melbourne", "Perth", "Adelaide", "Hobart", "Canberra", "Darwin"),
position = c("r", "r", "b", "l", "b", "b", "r", "l"),
inset_labs = c("B - Brisbane (Qld)", "S - Sydney (NSW)",
"M - Melbourne (Vic)", "P - Perth (WA)",
"A - Adelaide (SA)", "H - Hobart (Tas)",
"C - Canberra (ACT)", "D - Darwin (NT)")
) %>%
mutate(initials = str_sub(city, 1, 1))
# quantiles for IRSD
irsd_5c <- mutate(global_obj$census,
irsd_5c = case_when(
ABS_irsd_decile_nation_complete %in% c("1", "2") ~ "1 - most\ndisadvantaged",
ABS_irsd_decile_nation_complete %in% c("3", "4") ~ "2",
ABS_irsd_decile_nation_complete %in% c("5", "6") ~ "3",
ABS_irsd_decile_nation_complete %in% c("7", "8") ~ "4",
ABS_irsd_decile_nation_complete %in% c("9", "10") ~ "5 - least\ndisadvantaged"
)) %>%
dplyr::select(ps_area, irsd_5c)
# Full names
lookup <- data.frame(rf = names(raw_est),
rf_full = c("Leisure physical activity",
"All physical activity",
"Alcohol",
"Diet",
"Obesity",
"Overweight",
"Current smoking",
"Risky waist circumference"))
# Full names2
lookup <- data.frame(rf = names(raw_est),
sha = c("exercise", "exercise", "alcohol",
"fruit", "obese", "overweight",
"smoking", "overweight"),
rf_full = c("Inadequate physical activity (leisure)",
"Inadequate physical activity (all)",
"Risky alcohol consumption",
"Inadequate diet",
"Obesity",
"Overweight",
"Current smoking",
"Risky waist circumference"))
## Load PHA SHA data ## --------------------------------------------------------
source("src/wrangle/getSHA.R")
## Load census data ## ---------------------------------------------------------
source("src/wrangle/loadCensusData.R")
## END SCRIPT ## --------------------------------------------------------------
names(raw_est
)
k <- 7
rf <- names(raw_est)[k]
rf_full <- lookup[k,]$rf_full
message("Started ", k, ": ", rf)
# smoking is 7
# activity is 1
# load data
modelled_est <- readRDS(file = paste0("data/summary_files/", rf, "_b1.rds"))
# get best range
col_out <- getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05)
# SETUP
cut_offs <- col_out$cut_offs
mapping_data <- modelled_est$summ$sa2_map %>%
mutate() %>%
mutate(rr_median = ifelse(rr_median > cut_offs[2], cut_offs[2], rr_median),
rr_median = ifelse(rr_median < cut_offs[1], cut_offs[1], rr_median))
# define fill colours
Fill.colours <- c("#2C7BB6", "#2C7BB6", "#ABD9E9", "#FFFFBF", "#FDAE61", "#D7191C", "#D7191C")
Breaks.fill <- col_out$Breaks.fill
Fill.values <-col_out$Fill.values
# base map
base <- mapping_data %>%
ggplot(aes(fill = log2(rr_median)))+
theme_void()+
geom_sf(col = NA)+
scale_fill_gradientn(colors = Fill.colours,
values = rescale(Fill.values),
labels = as.character(round(Breaks.fill, 2)),
breaks = log2(Breaks.fill),
limits = range(Fill.values))+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
# Base map with legend
(base_legend <- base +
labs(fill = "Rate Ratio")+
guides(fill = guide_colourbar(barwidth = 15,
title.position = "top",
title.hjust = 0.5))+
theme(legend.position = "bottom"))
llegend <- ggpubr::get_legend(base_legend)
# Base map with boxes
base_boxes <- base
for(i in 1:8){
base_boxes <- base_boxes +
addBoxLabel(i, color = "black", size = 0.2)
}
# Create list of insets
inset_list <- list()
for(i in 1:8){
inset_list[[i]] <- base +
xlim(lims$xmin[i], lims$xmax[i]) +
ylim(lims$ymin[i], lims$ymax[i]) +
labs(title = lims$inset_labs[i])+
theme(panel.border = element_rect(colour = "black", size=1, fill=NA),
plot.title = element_text(margin = margin(0,0,2,0),
size = 6),
plot.margin = unit(c(1,1,1,1), "mm"))
}
inset_list <- Filter(Negate(is.null), inset_list)
# create final list
lay <- rbind(c(9,1,1,1,1,2),
c(5,1,1,1,1,3),
c(6,1,1,1,1,8),
c(4,10,10,10,10,7))
full_inset_plt <- arrangeGrob(grobs = c(list(base_boxes), inset_list, list(llegend)),
layout_matrix  = lay,
top = textGrob(rf_full,gp=gpar(fontsize=10)))
jsave(filename = paste0("rr_", rf ,".png"),
base_folder = paste0(base_folder),
plot = full_inset_plt, square = F)
k <- 1
rf <- names(raw_est)[k]
rf_full <- lookup[k,]$rf_full
message("Started ", k, ": ", rf)
# smoking is 7
# activity is 1
# load data
modelled_est <- readRDS(file = paste0("data/summary_files/", rf, "_b1.rds"))
# get best range
#col_out <- getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05)
# SETUP
#cut_offs <- col_out$cut_offs
mapping_data <- modelled_est$summ$sa2_map %>%
mutate() %>%
mutate(rr_median = ifelse(rr_median > cut_offs[2], cut_offs[2], rr_median),
rr_median = ifelse(rr_median < cut_offs[1], cut_offs[1], rr_median))
# define fill colours
Fill.colours <- c("#2C7BB6", "#2C7BB6", "#ABD9E9", "#FFFFBF", "#FDAE61", "#D7191C", "#D7191C")
Breaks.fill <- col_out$Breaks.fill
Fill.values <-col_out$Fill.values
# base map
base <- mapping_data %>%
ggplot(aes(fill = log2(rr_median)))+
theme_void()+
geom_sf(col = NA)+
scale_fill_gradientn(colors = Fill.colours,
values = rescale(Fill.values),
labels = as.character(round(Breaks.fill, 2)),
breaks = log2(Breaks.fill),
limits = range(Fill.values))+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
# Base map with legend
(base_legend <- base +
labs(fill = "Rate Ratio")+
guides(fill = guide_colourbar(barwidth = 15,
title.position = "top",
title.hjust = 0.5))+
theme(legend.position = "bottom"))
llegend <- ggpubr::get_legend(base_legend)
# Base map with boxes
base_boxes <- base
for(i in 1:8){
base_boxes <- base_boxes +
addBoxLabel(i, color = "black", size = 0.2)
}
# Create list of insets
inset_list <- list()
for(i in 1:8){
inset_list[[i]] <- base +
xlim(lims$xmin[i], lims$xmax[i]) +
ylim(lims$ymin[i], lims$ymax[i]) +
labs(title = lims$inset_labs[i])+
theme(panel.border = element_rect(colour = "black", size=1, fill=NA),
plot.title = element_text(margin = margin(0,0,2,0),
size = 6),
plot.margin = unit(c(1,1,1,1), "mm"))
}
inset_list <- Filter(Negate(is.null), inset_list)
# create final list
lay <- rbind(c(9,1,1,1,1,2),
c(5,1,1,1,1,3),
c(6,1,1,1,1,8),
c(4,10,10,10,10,7))
full_inset_plt <- arrangeGrob(grobs = c(list(base_boxes), inset_list, list(llegend)),
layout_matrix  = lay,
top = textGrob(rf_full,gp=gpar(fontsize=10)))
jsave(filename = paste0("rr_", rf ,".png"),
base_folder = paste0(base_folder),
plot = full_inset_plt, square = F)
getBestRRCutPoint(summsa2all$rr_median, cut_prob = 0.05)
getBestRRCutPoint(summsa2all$rr_median, cut_prob = 0.03)
source("src/ms.R")
for(k in 1:8){
rf <- names(raw_est)[k]
rf_full <- lookup[k,]$rf_full
message("Started ", k, ": ", rf)
# load data
modelled_est <- readRDS(file = paste0("data/summary_files/", rf, "_b1.rds"))
# get best range
#col_out <- getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05)
col_out <- getBestRRCutPoint(summsa2all$rr_median, cut_prob = 0.03)
# SETUP
cut_offs <- col_out$cut_offs
mapping_data <- modelled_est$summ$sa2_map %>%
mutate() %>%
mutate(rr_median = ifelse(rr_median > cut_offs[2], cut_offs[2], rr_median),
rr_median = ifelse(rr_median < cut_offs[1], cut_offs[1], rr_median))
# define fill colours
Fill.colours <- c("#2C7BB6", "#2C7BB6", "#ABD9E9", "#FFFFBF", "#FDAE61", "#D7191C", "#D7191C")
Breaks.fill <- col_out$Breaks.fill
Fill.values <-col_out$Fill.values
# base map
base <- mapping_data %>%
ggplot(aes(fill = log2(rr_median)))+
theme_void()+
geom_sf(col = NA)+
scale_fill_gradientn(colors = Fill.colours,
values = rescale(Fill.values),
labels = as.character(round(Breaks.fill, 2)),
breaks = log2(Breaks.fill),
limits = range(Fill.values))+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
# Base map with legend
(base_legend <- base +
labs(fill = "Rate Ratio")+
guides(fill = guide_colourbar(barwidth = 15,
title.position = "top",
title.hjust = 0.5))+
theme(legend.position = "bottom"))
llegend <- ggpubr::get_legend(base_legend)
# Base map with boxes
base_boxes <- base
for(i in 1:8){
base_boxes <- base_boxes +
addBoxLabel(i, color = "black", size = 0.2)
}
# Create list of insets
inset_list <- list()
for(i in 1:8){
inset_list[[i]] <- base +
xlim(lims$xmin[i], lims$xmax[i]) +
ylim(lims$ymin[i], lims$ymax[i]) +
labs(title = lims$inset_labs[i])+
theme(panel.border = element_rect(colour = "black", size=1, fill=NA),
plot.title = element_text(margin = margin(0,0,2,0),
size = 6),
plot.margin = unit(c(1,1,1,1), "mm"))
}
inset_list <- Filter(Negate(is.null), inset_list)
# create final list
lay <- rbind(c(9,1,1,1,1,2),
c(5,1,1,1,1,3),
c(6,1,1,1,1,8),
c(4,10,10,10,10,7))
full_inset_plt <- arrangeGrob(grobs = c(list(base_boxes), inset_list, list(llegend)),
layout_matrix  = lay,
top = textGrob(rf_full,gp=gpar(fontsize=10)))
# save plot
jsave(filename = paste0("rr_", rf ,".png"),
base_folder = paste0(base_folder, "/maps"),
plot = full_inset_plt, square = F)
# cleanup
rm(base, base_boxes, llegend, base_legend, mapping_data, lay, full_inset_plt)
message("---- Finished rrs")
}
getBestRRCutPoint(summsa2all$or_median, cut_prob = 0.03)
