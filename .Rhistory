theme(panel.border = element_rect(colour = "black", size=1, fill=NA),
plot.title = element_text(margin = margin(0,0,2,0),
size = 6),
plot.margin = unit(c(1,1,1,1), "mm"))
}
inset_list <- Filter(Negate(is.null), inset_list)
# create final list
lay <- rbind(c(9,1,1,1,1,2),
c(5,1,1,1,1,3),
c(6,1,1,1,1,8),
c(4,10,10,10,10,7))
full_inset_plt <- arrangeGrob(grobs = c(list(base_boxes), inset_list, list(llegend)),
layout_matrix  = lay,
top = textGrob(rf_full,gp=gpar(fontsize=10)))
# save object
jsave(filename = paste0("mucisize_", rf ,".png"),
base_folder = paste0(base_folder, "/maps"),
plot = full_inset_plt, square = F)
# cleanup
rm(base, base_boxes, llegend, base_legend, lay, full_inset_plt)
message("---- Finished prevalence cisize")
## ODDS RATIOS #### ------------------------------------------------------------
# SETUP - use 2 instead!
cut_offs <- c(1/2, 2)
mapping_data <- modelled_est$summ$sa2_map %>%
mutate() %>%
mutate(or_median = ifelse(or_median > cut_offs[2], cut_offs[2], or_median),
or_median = ifelse(or_median < cut_offs[1], cut_offs[1], or_median))
# define fill colours
Fill.colours <- c("#2C7BB6", "#2C7BB6", "#ABD9E9", "#FFFFBF", "#FDAE61", "#D7191C", "#D7191C")
End <- log2(2.1)
Breaks.fill <- c(1/2, 1/1.5, 1, 1.5, 2)
Fill.values <- c(-End, log2(Breaks.fill), End)
# base map
base <- mapping_data %>%
ggplot(aes(fill = log2(or_median)))+
theme_void()+
geom_sf(col = NA)+
scale_fill_gradientn(colors = Fill.colours,
values = rescale(Fill.values),
labels = as.character(round(Breaks.fill, 3)),
breaks = log2(Breaks.fill),
limits = range(Fill.values))+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
# Base map with legend
(base_legend <- base +
labs(fill = "Odds Ratio")+
guides(fill = guide_colourbar(barwidth = 15,
title.position = "top",
title.hjust = 0.5))+
theme(legend.position = "bottom"))
llegend <- ggpubr::get_legend(base_legend)
# Base map with boxes
base_boxes <- base
for(i in 1:8){
base_boxes <- base_boxes +
addBoxLabel(i, color = "black", size = 0.2)
}
# Create list of insets
inset_list <- list()
for(i in 1:8){
inset_list[[i]] <- base +
xlim(lims$xmin[i], lims$xmax[i]) +
ylim(lims$ymin[i], lims$ymax[i]) +
labs(title = lims$inset_labs[i])+
theme(panel.border = element_rect(colour = "black", size=1, fill=NA),
plot.title = element_text(margin = margin(0,0,2,0),
size = 6),
plot.margin = unit(c(1,1,1,1), "mm"))
}
inset_list <- Filter(Negate(is.null), inset_list)
# create final list
lay <- rbind(c(9,1,1,1,1,2),
c(5,1,1,1,1,3),
c(6,1,1,1,1,8),
c(4,10,10,10,10,7))
full_inset_plt <- arrangeGrob(grobs = c(list(base_boxes), inset_list, list(llegend)),
layout_matrix  = lay,
top = textGrob(rf_full,gp=gpar(fontsize=10)))
# save plot
jsave(filename = paste0("or_", rf ,".png"),
base_folder = paste0(base_folder, "/maps"),
plot = full_inset_plt, square = F)
# cleanup
rm(base, base_boxes, llegend, base_legend, mapping_data, lay, full_inset_plt)
message("---- Finished ors")
## ODDS RATIOS - EP #### -------------------------------------------------------
# SETUP
mapping_data <- modelled_est$summ$sa2_map %>%
mutate(or_EP = ifelse(or_EP == 0, 0.001, or_EP),
or_EP = ifelse(or_EP == 1, 0.999, or_EP))
# base map
base <- mapping_data %>%
ggplot()+
theme_void()+
geom_sf(aes(fill = or_EP), col = NA)+
scale_fill_gradientn(colors = c("#008837", "#a6dba0", "white","white","white", "#c2a5cf", "#7b3294"),
limits = c(-0.0000001,1.0000001),
#oob = squish,
#trans = "logit",
breaks = c(0,0.2,0.25,0.5,0.75,0.8,1),
labels = as.character(c(0,0.2,"",0.5,"",0.8,1)))+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
# Base map with legend
(base_legend <- base +
labs(fill = "Exceedance probability")+
guides(fill = guide_colourbar(barwidth = 15,
title.position = "top",
title.hjust = 0.5))+
theme(legend.position = "bottom"))
llegend <- ggpubr::get_legend(base_legend)
# Base map with boxes
base_boxes <- base
for(i in 1:8){
base_boxes <- base_boxes +
addBoxLabel(i, color = "black", size = 0.2)
}
# Create list of insets
inset_list <- list()
for(i in 1:8){
inset_list[[i]] <- base +
xlim(lims$xmin[i], lims$xmax[i]) +
ylim(lims$ymin[i], lims$ymax[i]) +
labs(title = lims$inset_labs[i])+
theme(panel.border = element_rect(colour = "black", size=1, fill=NA),
plot.title = element_text(margin = margin(0,0,2,0),
size = 6),
plot.margin = unit(c(1,1,1,1), "mm"))
}
inset_list <- Filter(Negate(is.null), inset_list)
# create final list
lay <- rbind(c(9,1,1,1,1,2),
c(5,1,1,1,1,3),
c(6,1,1,1,1,8),
c(4,10,10,10,10,7))
full_inset_plt <- arrangeGrob(grobs = c(list(base_boxes), inset_list, list(llegend)),
layout_matrix  = lay,
top = textGrob(rf_full,gp=gpar(fontsize=10)))
# save object
jsave(filename = paste0("orep_", rf ,".png"),
base_folder = paste0(base_folder, "/maps"),
plot = full_inset_plt, square = F)
# cleanup
rm(base, base_boxes, llegend, base_legend, mapping_data, lay, full_inset_plt)
message("---- Finished or eps")
## RR #### ---------------------------------------------------------------------
# get best range
#col_out <- getBestRRCutPoint(modelled_est$summ$sa2_map$rr_median, cut_prob = 0.05)
col_out <- getBestRRCutPoint(summsa2all$rr_median, cut_prob = 0.03)
# SETUP
cut_offs <- col_out$cut_offs
mapping_data <- modelled_est$summ$sa2_map %>%
mutate() %>%
mutate(rr_median = ifelse(rr_median > cut_offs[2], cut_offs[2], rr_median),
rr_median = ifelse(rr_median < cut_offs[1], cut_offs[1], rr_median))
# define fill colours
Fill.colours <- c("#2C7BB6", "#2C7BB6", "#ABD9E9", "#FFFFBF", "#FDAE61", "#D7191C", "#D7191C")
Breaks.fill <- col_out$Breaks.fill
Fill.values <-col_out$Fill.values
# base map
base <- mapping_data %>%
ggplot(aes(fill = log2(rr_median)))+
theme_void()+
geom_sf(col = NA)+
scale_fill_gradientn(colors = Fill.colours,
values = rescale(Fill.values),
labels = as.character(round(Breaks.fill, 2)),
breaks = log2(Breaks.fill),
limits = range(Fill.values))+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
# Base map with legend
(base_legend <- base +
labs(fill = "Rate Ratio")+
guides(fill = guide_colourbar(barwidth = 15,
title.position = "top",
title.hjust = 0.5))+
theme(legend.position = "bottom"))
llegend <- ggpubr::get_legend(base_legend)
# Base map with boxes
base_boxes <- base
for(i in 1:8){
base_boxes <- base_boxes +
addBoxLabel(i, color = "black", size = 0.2)
}
# Create list of insets
inset_list <- list()
for(i in 1:8){
inset_list[[i]] <- base +
xlim(lims$xmin[i], lims$xmax[i]) +
ylim(lims$ymin[i], lims$ymax[i]) +
labs(title = lims$inset_labs[i])+
theme(panel.border = element_rect(colour = "black", size=1, fill=NA),
plot.title = element_text(margin = margin(0,0,2,0),
size = 6),
plot.margin = unit(c(1,1,1,1), "mm"))
}
inset_list <- Filter(Negate(is.null), inset_list)
# create final list
lay <- rbind(c(9,1,1,1,1,2),
c(5,1,1,1,1,3),
c(6,1,1,1,1,8),
c(4,10,10,10,10,7))
full_inset_plt <- arrangeGrob(grobs = c(list(base_boxes), inset_list, list(llegend)),
layout_matrix  = lay,
top = textGrob(rf_full,gp=gpar(fontsize=10)))
# save plot
jsave(filename = paste0("rr_", rf ,".png"),
base_folder = paste0(base_folder, "/maps"),
plot = full_inset_plt, square = F)
# cleanup
rm(base, base_boxes, llegend, base_legend, mapping_data, lay, full_inset_plt)
message("---- Finished rrs")
## RR - CI SIZE #### ---------------------------------------------------
# base map
base <- modelled_est$summ$sa2_map %>%
ggplot()+
theme_void()+
geom_sf(aes(fill = rr_cisize), col = NA)+
scale_fill_viridis_c(begin = 0, end = 1,
direction = -1,
option = "D")+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
# Base map with legend
(base_legend <- base +
labs(fill = "Width of 95% HDI")+
guides(fill = guide_colourbar(barwidth = 15,
title.position = "top",
title.hjust = 0.5))+
theme(legend.position = "bottom"))
llegend <- ggpubr::get_legend(base_legend)
# Base map with boxes
base_boxes <- base
for(i in 1:8){
base_boxes <- base_boxes +
addBoxLabel(i, color = "black", size = 0.2)
}
# Create list of insets
inset_list <- list()
for(i in 1:8){
inset_list[[i]] <- base +
xlim(lims$xmin[i], lims$xmax[i]) +
ylim(lims$ymin[i], lims$ymax[i]) +
labs(title = lims$inset_labs[i])+
theme(panel.border = element_rect(colour = "black", size=1, fill=NA),
plot.title = element_text(margin = margin(0,0,2,0),
size = 6),
plot.margin = unit(c(1,1,1,1), "mm"))
}
inset_list <- Filter(Negate(is.null), inset_list)
# create final list
lay <- rbind(c(9,1,1,1,1,2),
c(5,1,1,1,1,3),
c(6,1,1,1,1,8),
c(4,10,10,10,10,7))
full_inset_plt <- arrangeGrob(grobs = c(list(base_boxes), inset_list, list(llegend)),
layout_matrix  = lay,
top = textGrob(rf_full,gp=gpar(fontsize=10)))
# save object
jsave(filename = paste0("rrcisize_", rf ,".png"),
base_folder = paste0(base_folder, "/maps"),
plot = full_inset_plt, square = F)
# cleanup
rm(base, base_boxes, llegend, base_legend, lay, full_inset_plt)
message("---- Finished rr cisize")
## Counts #### -----------------------------------------------------------------
# squish the top and lower 1 quantiles
rar<- unname(quantile(modelled_est$summ$sa2$count_median/1000, p = c(0.01,0.99)))
# base map
base <- modelled_est$summ$sa2_map %>%
ggplot()+
theme_void()+
geom_sf(aes(fill = count_median/1000), col = NA)+
scale_fill_viridis_c(begin = 0.3, end = 1,
direction = -1,
option = "B",
limits = rar, oob = squish)+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
# Base map with legend
(base_legend <- base +
labs(fill = "Count (x1000)")+
guides(fill = guide_colourbar(barwidth = 15,
title.position = "top",
title.hjust = 0.5))+
theme(legend.position = "bottom"))
llegend <- ggpubr::get_legend(base_legend)
# Base map with boxes
base_boxes <- base
for(i in 1:8){
base_boxes <- base_boxes +
addBoxLabel(i, color = "black", size = 0.2)
}
# Create list of insets
inset_list <- list()
for(i in 1:8){
inset_list[[i]] <- base +
xlim(lims$xmin[i], lims$xmax[i]) +
ylim(lims$ymin[i], lims$ymax[i]) +
labs(title = lims$inset_labs[i])+
theme(panel.border = element_rect(colour = "black", size=1, fill=NA),
plot.title = element_text(margin = margin(0,0,2,0),
size = 6),
plot.margin = unit(c(1,1,1,1), "mm"))
}
inset_list <- Filter(Negate(is.null), inset_list)
# create final list
lay <- rbind(c(9,1,1,1,1,2),
c(5,1,1,1,1,3),
c(6,1,1,1,1,8),
c(4,10,10,10,10,7))
full_inset_plt <- arrangeGrob(grobs = c(list(base_boxes), inset_list, list(llegend)),
layout_matrix  = lay,
top = textGrob(rf_full,gp=gpar(fontsize=10)))
# save plot
jsave(filename = paste0("count_", rf ,".png"),
base_folder = paste0(base_folder, "/maps"),
plot = full_inset_plt, square = F)
# cleanup
rm(base, base_boxes, llegend, base_legend, lay, full_inset_plt)
message("---- Finished counts")
## LISA #### -------------------------------------------------------------------
modelled_est$summ$sa2_map <- modelled_est$summ$sa2 %>%
right_join(.,map_sa2, by = c("ps_area", "SA2")) %>% sf::st_as_sf()
# base map
base <- modelled_est$summ$sa2_map %>%
mutate(lisa = ifelse(or_EP > 0.9, "H",
ifelse(or_EP < 0.1, "L", NA)),
LISA_c = factor(ifelse(is.na(LISA) & !is.na(lisa), lisa, as.character(LISA)),
levels = c("HH", "H", "L", "LL"))) %>%
ggplot()+
theme_void()+
geom_sf(aes(fill = LISA_c), col = NA)+
scale_fill_manual(values = c("red", "coral", "skyblue", "royalblue"),
breaks = c("HH", "H", "L", "LL"))+
geom_sf(data = aus_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.2)+
geom_sf(data = state_border, aes(geometry = geometry),
colour = "black", fill = NA, size = 0.1)+
theme(legend.position = "none",
text = element_text(size = 8),
plot.title = element_text(margin = margin(0,0,2,0)),
plot.margin = unit(c(1,1,1,1), "mm"))
# Base map with legend
(base_legend <- base +
labs(fill = "")+
theme(legend.position = "bottom"))
llegend <- ggpubr::get_legend(base_legend)
# Base map with boxes
base_boxes <- base
for(i in 1:8){
base_boxes <- base_boxes +
addBoxLabel(i, color = "black", size = 0.2)
}
# Create list of insets
inset_list <- list()
for(i in 1:8){
inset_list[[i]] <- base +
xlim(lims$xmin[i], lims$xmax[i]) +
ylim(lims$ymin[i], lims$ymax[i]) +
labs(title = lims$inset_labs[i])+
theme(panel.border = element_rect(colour = "black", size=1, fill=NA),
plot.title = element_text(margin = margin(0,0,2,0),
size = 6),
plot.margin = unit(c(1,1,1,1), "mm"))
}
inset_list <- Filter(Negate(is.null), inset_list)
# create final list
lay <- rbind(c(9,1,1,1,1,2),
c(5,1,1,1,1,3),
c(6,1,1,1,1,8),
c(4,10,10,10,10,7))
full_inset_plt <- arrangeGrob(grobs = c(list(base_boxes), inset_list, list(llegend)),
layout_matrix  = lay,
top = textGrob(rf_full,gp=gpar(fontsize=10)))
# save object
jsave(filename = paste0("lisa_", rf ,".png"),
base_folder = paste0(base_folder, "/maps"),
plot = full_inset_plt, square = F)
# cleanup
rm(base, base_boxes, llegend, base_legend, lay, full_inset_plt)
message("---- Finished LISA")
## FINISH FOR LOOP #### --------------------------------------------------------
}
## END SCRIPT #### -------------------------------------------------------------
##
# Create data for Journal page
##
# Packages
library(tidyverse)
library(readr)
library(readxl)
library(sf)
library(openxlsx)
rm(list = ls())
## Functions ## ----------------------------------------------------------------
source('src/wrangle/functions_ALL.R')
source('src/wrangle/moreFuns.R')
# Load global data
global_obj <- readRDS("data/DataLabExport/global_obj.rds")
# Load raw estimates
raw_est <- pbapply::pblapply(list.files("data/DataLabExport",
pattern = "raw_est_*", full.names = T), readRDS)
names(raw_est) <- str_remove(
str_remove(
list.files("data/DataLabExport", pattern = "raw_est_*"), "raw_est_"), ".rds")
# load map
map_sa2_full <- st_read("C:/r_proj/ACAriskfactors/data/2016_SA2_Shape_min/2016_SA2_Shape_min.shp") %>%
mutate(SA2 = as.numeric(SA2_MAIN16)) %>%
filter(!str_detect(SA2_NAME, "Island")) %>%
filter(STATE_NAME != "Other Territories") %>%
dplyr::select(SA2_MAIN16, SA2_NAME) %>%
st_drop_geometry() %>%
rename(SA2 = SA2_MAIN16,
SA2_name = SA2_NAME) %>%
mutate(SA2 = as.numeric(SA2))
# Load all modelled estimates
summsa2all <- readRDS("data/summary_files/summsa2all.rds")
summsa2all
summsa2all %>%
rename(risk_factor = model) %>%
relocate(SA2, risk_factor, contains(c("mu_", "rr_")))
summsa2all %>%
rename(risk_factor = model) %>%
dplyr::select(SA2, risk_factor, contains(c("mu_", "rr_")))
summsa2all %>%
rename(risk_factor = model) %>%
dplyr::select(SA2, risk_factor, contains(c("mu_", "rr_"))) %>%
dplyr::select(-contains("logrr_"))
source('src/ms.R')
lookup
# create excel
summsa2all %>%
rename(risk_factor = model) %>%
dplyr::select(SA2, risk_factor, contains(c("mu_", "rr_"))) %>%
dplyr::select(-contains("logrr_")) %>%
mutate(risk_factor = case_when(
risk_factor == "activityleis" ~ "Inadequate physical activity (leisure)",
risk_factor == "activityleiswkpl" ~ "Inadequate physical activity (all)",
risk_factor == "alcohol" ~ "Risky alcohol consumption",
risk_factor == "diet" ~ "Inadequate diet",
risk_factor == "obesity" ~ "Obese",
risk_factor == "overweight" ~ "Overweight/obese",
risk_factor == "smoking" ~ "Current smoking",
risk_factor == "waist_circum" ~ "Risky waist circumference"
))
# create excel
summsa2all %>%
dplyr::select(SA2, model, contains(c("mu_", "rr_"))) %>%
dplyr::select(-contains("logrr_")) %>%
rename(risk_factor = model,
SA2_2016 = SA2) %>%
mutate(risk_factor = case_when(
risk_factor == "activityleis" ~ "Inadequate physical activity (leisure)",
risk_factor == "activityleiswkpl" ~ "Inadequate physical activity (all)",
risk_factor == "alcohol" ~ "Risky alcohol consumption",
risk_factor == "diet" ~ "Inadequate diet",
risk_factor == "obesity" ~ "Obese",
risk_factor == "overweight" ~ "Overweight/obese",
risk_factor == "smoking" ~ "Current smoking",
risk_factor == "waist_circum" ~ "Risky waist circumference"
))
# create excel
summsa2all %>%
dplyr::select(SA2, model, contains(c("mu_", "rr_"))) %>%
dplyr::select(-contains("logrr_")) %>%
rename(risk_factor = model,
SA2_2016 = SA2) %>%
mutate(risk_factor = case_when(
risk_factor == "activityleis" ~ "Inadequate physical activity (leisure)",
risk_factor == "activityleiswkpl" ~ "Inadequate physical activity (all)",
risk_factor == "alcohol" ~ "Risky alcohol consumption",
risk_factor == "diet" ~ "Inadequate diet",
risk_factor == "obesity" ~ "Obese",
risk_factor == "overweight" ~ "Overweight/obese",
risk_factor == "smoking" ~ "Current smoking",
risk_factor == "waist_circum" ~ "Risky waist circumference"
)) %>%
write.csv(., "ModelledEstimates.csv")
